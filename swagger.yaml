openapi: 3.0.1
info:
  title: TGS API
  description: A production scale tool for BYOND server management
  contact:
    name: /tg/station 13
    url: https://github.com/tgstation
  license:
    name: AGPL-3.0
    url: https://github.com/tgstation/tgstation-server/blob/dev/LICENSE
  version: 9.10.2
paths:
  /Administration:
    get:
      tags:
      - Administration
      summary: Get Tgstation.Server.Api.Models.Response.AdministrationResponse server information.
      operationId: AdministrationController.Read
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      responses:
        200:
          description: Retrieved Tgstation.Server.Api.Models.Response.AdministrationResponse data successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdministrationResponse'
        424:
          description: The GitHub API rate limit was hit. See response header Retry-After.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        429:
          description: A GitHub API error occurred. See error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    post:
      tags:
      - Administration
      summary: Attempt to perform a server upgrade.
      operationId: AdministrationController.Update
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      requestBody:
        description: The Tgstation.Server.Api.Models.Request.ServerUpdateRequest.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ServerUpdateRequest'
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ServerUpdateRequest'
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ServerUpdateRequest'
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ServerUpdateRequest'
        required: true
      responses:
        202:
          description: Update has been started successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerUpdateResponse'
        410:
          description: The requested release version could not be found in the target GitHub repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        422:
          description: Upgrade operations are unavailable due to the launch configuration of TGS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        424:
          description: A GitHub rate limit was encountered or the swarm integrity check failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        429:
          description: A GitHub API error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    delete:
      tags:
      - Administration
      summary: Attempts to restart the server.
      operationId: AdministrationController.Delete
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      responses:
        204:
          description: Restart begun successfully.
        422:
          description: Restart operations are unavailable due to the launch configuration of TGS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Administration/Logs:
    get:
      tags:
      - Administration
      summary: List Tgstation.Server.Api.Models.Response.LogFileResponses present.
      operationId: AdministrationController.ListLogs
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: page
        in: query
        description: The current page.
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: The page size.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Listed logs successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLogFileResponse'
        409:
          description: An IO error occurred while listing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Administration/Logs/{path}:
    get:
      tags:
      - Administration
      summary: Download a Tgstation.Server.Api.Models.Response.LogFileResponse.
      operationId: AdministrationController.GetLog
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: path
        in: path
        description: The path to download.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Downloaded Tgstation.Server.Api.Models.Response.LogFileResponse successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogFileResponse'
        409:
          description: An IO error occurred while downloading.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Byond:
    get:
      tags:
      - Byond
      summary: Gets the active Tgstation.Server.Api.Models.Response.ByondResponse.Version.
      operationId: ByondController.Read
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      responses:
        200:
          description: Retrieved version information successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ByondResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    post:
      tags:
      - Byond
      summary: Changes the active BYOND version to the one specified in a given model.
      operationId: ByondController.Update
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: The Tgstation.Server.Api.Models.Request.ByondVersionRequest containing the System.Version to switch to.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ByondVersionRequest'
              description: A request to install a BYOND Tgstation.Server.Api.Models.Request.ByondVersionDeleteRequest.Version.
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ByondVersionRequest'
              description: A request to install a BYOND Tgstation.Server.Api.Models.Request.ByondVersionDeleteRequest.Version.
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ByondVersionRequest'
              description: A request to install a BYOND Tgstation.Server.Api.Models.Request.ByondVersionDeleteRequest.Version.
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ByondVersionRequest'
              description: A request to install a BYOND Tgstation.Server.Api.Models.Request.ByondVersionDeleteRequest.Version.
        required: true
      responses:
        200:
          description: Switched active version successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ByondInstallResponse'
        202:
          description: Created Tgstation.Server.Host.Models.Job to install and switch active version successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ByondInstallResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    delete:
      tags:
      - Byond
      summary: Attempts to delete the BYOND version specified in a given model from the instance.
      operationId: ByondController.Delete
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: The Tgstation.Server.Api.Models.Request.ByondVersionDeleteRequest containing the System.Version to delete.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ByondVersionDeleteRequest'
              description: A request to delete a specific Tgstation.Server.Api.Models.Request.ByondVersionDeleteRequest.Version.
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ByondVersionDeleteRequest'
              description: A request to delete a specific Tgstation.Server.Api.Models.Request.ByondVersionDeleteRequest.Version.
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ByondVersionDeleteRequest'
              description: A request to delete a specific Tgstation.Server.Api.Models.Request.ByondVersionDeleteRequest.Version.
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ByondVersionDeleteRequest'
              description: A request to delete a specific Tgstation.Server.Api.Models.Request.ByondVersionDeleteRequest.Version.
        required: true
      responses:
        202:
          description: Created Tgstation.Server.Host.Models.Job to delete target version successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponse'
        409:
          description: Attempted to delete the active BYOND System.Version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        410:
          description: The Tgstation.Server.Api.Models.Request.ByondVersionDeleteRequest.Version specified was not installed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Byond/List:
    get:
      tags:
      - Byond
      summary: Lists installed Tgstation.Server.Api.Models.Response.ByondResponse.Versions.
      operationId: ByondController.List
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: page
        in: query
        description: The current page.
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: The page size.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Retrieved version information successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedByondResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Chat:
    put:
      tags:
      - Chat
      summary: Create a new chat bot model.
      operationId: ChatController.Create
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: The Tgstation.Server.Api.Models.Request.ChatBotCreateRequest.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ChatBotCreateRequest'
              description: Represents a request to update a chat bot.
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ChatBotCreateRequest'
              description: Represents a request to update a chat bot.
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ChatBotCreateRequest'
              description: Represents a request to update a chat bot.
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ChatBotCreateRequest'
              description: Represents a request to update a chat bot.
        required: true
      responses:
        201:
          description: Created Tgstation.Server.Host.Models.ChatBot successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatBotResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    post:
      tags:
      - Chat
      summary: Updates a chat bot model.
      operationId: ChatController.Update
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: The Tgstation.Server.Api.Models.Request.ChatBotUpdateRequest.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ChatBotUpdateRequest'
              description: Represents a request to update a chat bot.
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ChatBotUpdateRequest'
              description: Represents a request to update a chat bot.
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ChatBotUpdateRequest'
              description: Represents a request to update a chat bot.
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ChatBotUpdateRequest'
              description: Represents a request to update a chat bot.
        required: true
      responses:
        200:
          description: Update applied successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatBotResponse'
        204:
          description: Update applied successfully. Tgstation.Server.Host.Models.ChatBot not returned based on user permissions.
        410:
          description: The Tgstation.Server.Host.Models.ChatBot with the given ID does not exist in this instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Chat/{id}:
    delete:
      tags:
      - Chat
      summary: Delete a Tgstation.Server.Host.Models.ChatBot.
      operationId: ChatController.Delete
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: id
        in: path
        description: The Tgstation.Server.Api.Models.EntityId.Id to delete.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: Chat bot deleted or does not exist.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    get:
      tags:
      - Chat
      summary: Get a specific Tgstation.Server.Host.Models.ChatBot.
      operationId: ChatController.GetId
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: id
        in: path
        description: The Tgstation.Server.Api.Models.EntityId.Id to retrieve.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Retrieved Tgstation.Server.Host.Models.ChatBot successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatBotResponse'
        410:
          description: The Tgstation.Server.Host.Models.ChatBot with the given ID does not exist in this instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Chat/List:
    get:
      tags:
      - Chat
      summary: List Tgstation.Server.Host.Models.ChatBots.
      operationId: ChatController.List
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: page
        in: query
        description: The current page.
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: The page size.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Listed chat bots successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedChatBotResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Config:
    post:
      tags:
      - Configuration
      summary: Write to a configuration file.
      operationId: ConfigurationController.Update
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: The Tgstation.Server.Api.Models.Request.ConfigurationFileRequest representing the file.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigurationFileRequest'
              description: Represents a request to update a configuration file.
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigurationFileRequest'
              description: Represents a request to update a configuration file.
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigurationFileRequest'
              description: Represents a request to update a configuration file.
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigurationFileRequest'
              description: Represents a request to update a configuration file.
        required: true
      responses:
        200:
          description: File updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationFileResponse'
        202:
          description: File upload ticket created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationFileResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    put:
      tags:
      - Configuration
      summary: Create a configuration directory.
      operationId: ConfigurationController.CreateDirectory
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: The Tgstation.Server.Api.Models.Request.ConfigurationFileRequest representing the directory.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigurationFileRequest'
              description: Represents a request to update a configuration file.
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigurationFileRequest'
              description: Represents a request to update a configuration file.
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigurationFileRequest'
              description: Represents a request to update a configuration file.
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigurationFileRequest'
              description: Represents a request to update a configuration file.
        required: true
      responses:
        200:
          description: Directory already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationFileResponse'
        201:
          description: Directory created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationFileResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    delete:
      tags:
      - Configuration
      summary: Deletes an empty directory.
      operationId: ConfigurationController.DeleteDirectory
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: A Tgstation.Server.Api.Models.Request.ConfigurationFileRequest representing the path to the directory to delete.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigurationFileRequest'
              description: Represents a request to update a configuration file.
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigurationFileRequest'
              description: Represents a request to update a configuration file.
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigurationFileRequest'
              description: Represents a request to update a configuration file.
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigurationFileRequest'
              description: Represents a request to update a configuration file.
        required: true
      responses:
        204:
          description: Empty directory deleted successfully.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Config/File/{filePath}:
    get:
      tags:
      - Configuration
      summary: Get the contents of a file at a filePath.
      operationId: ConfigurationController.File
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: filePath
        in: path
        description: The path of the file to get.
        required: true
        schema:
          type: string
      responses:
        200:
          description: File read successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationFileResponse'
        410:
          description: File does not currently exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Config/List/{directoryPath}:
    get:
      tags:
      - Configuration
      summary: Get the contents of a directory at a directoryPath.
      operationId: ConfigurationController.Directory
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: directoryPath
        in: path
        description: The path of the directory to get.
        required: true
        schema:
          type: string
      - name: page
        in: query
        description: The current page.
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: The page size.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Directory listed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedConfigurationFileResponse'
        410:
          description: Directory does not currently exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Config/List:
    get:
      tags:
      - Configuration
      summary: Get the contents of the root configuration directory.
      operationId: ConfigurationController.List
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: page
        in: query
        description: The current page.
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: The page size.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedConfigurationFileResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /DreamDaemon:
    put:
      tags:
      - DreamDaemon
      summary: Launches the watchdog.
      operationId: DreamDaemonController.Create
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      responses:
        202:
          description: Watchdog launch started successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    get:
      tags:
      - DreamDaemon
      summary: Get the watchdog status.
      operationId: DreamDaemonController.Read
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      responses:
        200:
          description: Read Tgstation.Server.Api.Models.Response.DreamDaemonResponse information successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DreamDaemonResponse'
        410:
          description: The database entity for the requested instance could not be retrieved. The instance was likely detached.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    delete:
      tags:
      - DreamDaemon
      summary: Stops the Watchdog if it's running.
      operationId: DreamDaemonController.Delete
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      responses:
        204:
          description: Watchdog terminated.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    post:
      tags:
      - DreamDaemon
      summary: Update watchdog settings to be applied at next server reboot.
      operationId: DreamDaemonController.Update
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: The Tgstation.Server.Api.Models.Request.DreamDaemonRequest with updated settings.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/DreamDaemonRequest'
              description: A request to update Tgstation.Server.Api.Models.Internal.DreamDaemonSettings.
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/DreamDaemonRequest'
              description: A request to update Tgstation.Server.Api.Models.Internal.DreamDaemonSettings.
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/DreamDaemonRequest'
              description: A request to update Tgstation.Server.Api.Models.Internal.DreamDaemonSettings.
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/DreamDaemonRequest'
              description: A request to update Tgstation.Server.Api.Models.Internal.DreamDaemonSettings.
        required: true
      responses:
        200:
          description: Settings applied successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DreamDaemonResponse'
        410:
          description: The database entity for the requested instance could not be retrieved. The instance was likely detached.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    patch:
      tags:
      - DreamDaemon
      summary: Creates a Tgstation.Server.Api.Models.Response.JobResponse to restart the Watchdog. It will not start if it wasn't already running.
      operationId: DreamDaemonController.Restart
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      responses:
        202:
          description: Restart Tgstation.Server.Api.Models.Response.JobResponse started successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /DreamDaemon/Diagnostics:
    patch:
      tags:
      - DreamDaemon
      summary: Creates a Tgstation.Server.Api.Models.Response.JobResponse to generate a DreamDaemon process dump.
      operationId: DreamDaemonController.CreateDump
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      responses:
        202:
          description: Dump Tgstation.Server.Api.Models.Response.JobResponse started successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /DreamMaker:
    get:
      tags:
      - DreamMaker
      summary: Read current deployment settings.
      operationId: DreamMakerController.Read
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      responses:
        200:
          description: Read deployment settings successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DreamMakerResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    put:
      tags:
      - DreamMaker
      summary: Begin deploying repository code.
      operationId: DreamMakerController.Create
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      responses:
        202:
          description: Created deployment Tgstation.Server.Api.Models.Response.JobResponse successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    post:
      tags:
      - DreamMaker
      summary: Update deployment settings.
      operationId: DreamMakerController.Update
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: The Tgstation.Server.Api.Models.Request.DreamMakerRequest.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/DreamMakerRequest'
              description: A request to the DreamMaker controller.
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/DreamMakerRequest'
              description: A request to the DreamMaker controller.
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/DreamMakerRequest'
              description: A request to the DreamMaker controller.
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/DreamMakerRequest'
              description: A request to the DreamMaker controller.
        required: true
      responses:
        200:
          description: Changes applied successfully. The updated Tgstation.Server.Host.Models.DreamMakerSettings will be returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DreamMakerResponse'
        204:
          description: Changes applied successfully. The updated Tgstation.Server.Host.Models.DreamMakerSettings will be not be returned due to permissions.
        410:
          description: The database entity for the requested instance could not be retrieved. The instance was likely detached.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /DreamMaker/{id}:
    get:
      tags:
      - DreamMaker
      summary: Get a Tgstation.Server.Host.Models.CompileJob specified by a given id.
      operationId: DreamMakerController.GetId
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: id
        in: path
        description: The Tgstation.Server.Api.Models.EntityId.Id.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Tgstation.Server.Host.Models.CompileJob retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompileJobResponse'
        404:
          description: Specified Tgstation.Server.Host.Models.CompileJob ID does not exist in this instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /DreamMaker/List:
    get:
      tags:
      - DreamMaker
      summary: List all Tgstation.Server.Host.Models.CompileJobTgstation.Server.Api.Models.EntityIds for the instance.
      operationId: DreamMakerController.List
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: page
        in: query
        description: The current page.
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: The page size.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Retrieved Tgstation.Server.Api.Models.EntityIds successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCompileJobResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /:
    get:
      tags:
      - Home
      summary: Main page of the Tgstation.Server.Host.Core.Application.
      operationId: HomeController.Home
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      responses:
        200:
          description: Tgstation.Server.Api.Models.Response.ServerInformationResponse retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInformationResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
    post:
      tags:
      - Home
      summary: Attempt to authenticate a Tgstation.Server.Host.Models.User using Tgstation.Server.Host.Controllers.ApiController.ApiHeaders.
      operationId: HomeController.CreateToken
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: OAuthProvider
        in: header
        description: The external OAuth service provider.
        style: simple
        schema:
          type: string
        example: Discord
      responses:
        200:
          description: User logged in and Tgstation.Server.Api.Models.Response.TokenResponse generated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        429:
          description: OAuth authentication failed due to rate limiting.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        401:
          description: User authentication failed.
        403:
          description: User authenticated but is disabled by an administrator.
        400:
          $ref: '#/components/responses/400'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Password_Login_Scheme: []
        OAuth_Login_Scheme: []
  /Instance:
    put:
      tags:
      - Instance
      summary: Create or attach an Tgstation.Server.Api.Models.Instance.
      operationId: InstanceController.Create
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      requestBody:
        description: The Tgstation.Server.Api.Models.Request.InstanceCreateRequest.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/InstanceCreateRequest'
              description: A request to create an Tgstation.Server.Api.Models.Instance.
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/InstanceCreateRequest'
              description: A request to create an Tgstation.Server.Api.Models.Instance.
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/InstanceCreateRequest'
              description: A request to create an Tgstation.Server.Api.Models.Instance.
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/InstanceCreateRequest'
              description: A request to create an Tgstation.Server.Api.Models.Instance.
        required: true
      responses:
        200:
          description: Instance attached successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceResponse'
        201:
          description: Instance created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    post:
      tags:
      - Instance
      summary: Modify an Tgstation.Server.Api.Models.Instance's settings.
      operationId: InstanceController.Update
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      requestBody:
        description: The updated Tgstation.Server.Api.Models.Instance settings.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/InstanceUpdateRequest'
              description: A request to update an Tgstation.Server.Api.Models.Instance.
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/InstanceUpdateRequest'
              description: A request to update an Tgstation.Server.Api.Models.Instance.
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/InstanceUpdateRequest'
              description: A request to update an Tgstation.Server.Api.Models.Instance.
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/InstanceUpdateRequest'
              description: A request to update an Tgstation.Server.Api.Models.Instance.
        required: true
      responses:
        200:
          description: Instance updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceResponse'
        202:
          description: Instance updated successfully and relocation job created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceResponse'
        410:
          description: The database entity for the requested instance could not be retrieved. The instance was likely detached.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Instance/{id}:
    delete:
      tags:
      - Instance
      summary: Detach an Tgstation.Server.Api.Models.Instance with the given id.
      operationId: InstanceController.Delete
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: id
        in: path
        description: The Tgstation.Server.Api.Models.EntityId.Id of the instance to detach.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: Instance detatched successfully.
        410:
          description: The database entity for the requested instance could not be retrieved. The instance was likely detached.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    get:
      tags:
      - Instance
      summary: Get a specific Tgstation.Server.Api.Models.Instance.
      operationId: InstanceController.GetId
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: id
        in: path
        description: The instance Tgstation.Server.Api.Models.EntityId.Id to retrieve.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Retrieved Tgstation.Server.Api.Models.Instance successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceResponse'
        410:
          description: The database entity for the requested instance could not be retrieved. The instance was likely detached.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    patch:
      tags:
      - Instance
      summary: Gives the current user full permissions on a given instance id.
      operationId: InstanceController.GrantPermissions
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: id
        in: path
        description: The instance Tgstation.Server.Api.Models.EntityId.Id to give permissions on.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: Granted permissions successfully.
        410:
          description: Client Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Instance/List:
    get:
      tags:
      - Instance
      summary: List Tgstation.Server.Api.Models.Instances.
      operationId: InstanceController.List
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: page
        in: query
        description: The current page.
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: The page size.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Retrieved Tgstation.Server.Api.Models.Instances successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedInstanceResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /InstancePermissionSet:
    put:
      tags:
      - InstancePermissionSet
      summary: Create an Tgstation.Server.Host.Models.InstancePermissionSet.
      operationId: InstancePermissionSetController.Create
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: The Tgstation.Server.Api.Models.Request.InstancePermissionSetRequest.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/InstancePermissionSetRequest'
              description: A request to update an instance permission set.
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/InstancePermissionSetRequest'
              description: A request to update an instance permission set.
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/InstancePermissionSetRequest'
              description: A request to update an instance permission set.
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/InstancePermissionSetRequest'
              description: A request to update an instance permission set.
        required: true
      responses:
        201:
          description: Tgstation.Server.Host.Models.InstancePermissionSet created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstancePermissionSetResponse'
        410:
          description: The Tgstation.Server.Api.Models.PermissionSet does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    post:
      tags:
      - InstancePermissionSet
      summary: Update the permissions for an Tgstation.Server.Host.Models.InstancePermissionSet.
      operationId: InstancePermissionSetController.Update
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: The Tgstation.Server.Api.Models.Request.InstancePermissionSetRequest.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/InstancePermissionSetRequest'
              description: A request to update an instance permission set.
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/InstancePermissionSetRequest'
              description: A request to update an instance permission set.
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/InstancePermissionSetRequest'
              description: A request to update an instance permission set.
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/InstancePermissionSetRequest'
              description: A request to update an instance permission set.
        required: true
      responses:
        200:
          description: Tgstation.Server.Host.Models.InstancePermissionSet updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstancePermissionSetResponse'
        410:
          description: The requested Tgstation.Server.Host.Models.InstancePermissionSet does not currently exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    get:
      tags:
      - InstancePermissionSet
      summary: Read the active Tgstation.Server.Host.Models.InstancePermissionSet.
      operationId: InstancePermissionSetController.Read
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      responses:
        200:
          description: Tgstation.Server.Host.Models.InstancePermissionSet retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstancePermissionSetResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /InstancePermissionSet/List:
    get:
      tags:
      - InstancePermissionSet
      summary: Lists Tgstation.Server.Host.Models.InstancePermissionSets for the instance.
      operationId: InstancePermissionSetController.List
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: page
        in: query
        description: The current page.
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: The page size.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Retrieved Tgstation.Server.Host.Models.InstancePermissionSets successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedInstancePermissionSetResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /InstancePermissionSet/{id}:
    get:
      tags:
      - InstancePermissionSet
      summary: Gets a specific Tgstation.Server.Api.Models.Internal.InstancePermissionSet.
      operationId: InstancePermissionSetController.GetId
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: id
        in: path
        description: The Tgstation.Server.Api.Models.Internal.InstancePermissionSet.PermissionSetId.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Retrieve Tgstation.Server.Api.Models.Internal.InstancePermissionSet successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstancePermissionSetResponse'
        410:
          description: The requested Tgstation.Server.Api.Models.Internal.InstancePermissionSet does not currently exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    delete:
      tags:
      - InstancePermissionSet
      summary: Delete an Tgstation.Server.Host.Models.InstancePermissionSet.
      operationId: InstancePermissionSetController.Delete
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: id
        in: path
        description: The Tgstation.Server.Api.Models.Internal.InstancePermissionSet.PermissionSetId to delete.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: Target Tgstation.Server.Host.Models.InstancePermissionSet deleted.
        410:
          description: Target Tgstation.Server.Host.Models.InstancePermissionSet or no longer exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Job:
    get:
      tags:
      - Job
      summary: Get active Tgstation.Server.Api.Models.Response.JobResponses for the instance.
      operationId: JobController.Read
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: page
        in: query
        description: The current page.
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: The page size.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Retrieved active Tgstation.Server.Host.Models.Jobs successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedJobResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Job/List:
    get:
      tags:
      - Job
      summary: List all Tgstation.Server.Api.Models.Response.JobResponse for the instance in reverse creation order.
      operationId: JobController.List
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: page
        in: query
        description: The current page.
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: The page size.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Retrieved Tgstation.Server.Host.Models.JobTgstation.Server.Api.Models.EntityIds successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedJobResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Job/{id}:
    delete:
      tags:
      - Job
      summary: Cancel a running Tgstation.Server.Api.Models.Response.JobResponse.
      operationId: JobController.Delete
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: id
        in: path
        description: The Tgstation.Server.Api.Models.EntityId.Id of the Tgstation.Server.Api.Models.Response.JobResponse to cancel.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        202:
          description: Tgstation.Server.Host.Models.Job cancellation requested successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponse'
        404:
          description: Tgstation.Server.Host.Models.Job does not exist in this instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        410:
          description: Tgstation.Server.Host.Models.Job could not be found in the job manager. Has it already completed?.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    get:
      tags:
      - Job
      summary: Get a specific Tgstation.Server.Api.Models.Response.JobResponse.
      operationId: JobController.GetId
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: id
        in: path
        description: The Tgstation.Server.Api.Models.EntityId.Id of the Tgstation.Server.Api.Models.Response.JobResponse to retrieve.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Retrieved Tgstation.Server.Host.Models.Job successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResponse'
        404:
          description: Tgstation.Server.Host.Models.Job does not exist in this instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Repository:
    put:
      tags:
      - Repository
      summary: Begin cloning the repository if it doesn't exist.
      operationId: RepositoryController.Create
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: The Tgstation.Server.Api.Models.Request.RepositoryCreateRequest.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/RepositoryCreateRequest'
              description: Represents a request to clone the repository.
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/RepositoryCreateRequest'
              description: Represents a request to clone the repository.
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/RepositoryCreateRequest'
              description: Represents a request to clone the repository.
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/RepositoryCreateRequest'
              description: Represents a request to clone the repository.
        required: true
      responses:
        201:
          description: The repository was created successfully and the Tgstation.Server.Api.Models.Response.JobResponse to clone it has begun.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryResponse'
        410:
          description: The database entity for the requested instance could not be retrieved. The instance was likely detached.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    delete:
      tags:
      - Repository
      summary: Delete the repository.
      operationId: RepositoryController.Delete
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      responses:
        202:
          description: Job to delete the repository created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryResponse'
        410:
          description: The database entity for the requested instance could not be retrieved. The instance was likely detached.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    get:
      tags:
      - Repository
      summary: Get the repository's status.
      operationId: RepositoryController.Read
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      responses:
        200:
          description: Retrieved the repository settings successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryResponse'
        201:
          description: Retrieved the repository settings successfully, though they did not previously exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryResponse'
        410:
          description: The database entity for the requested instance could not be retrieved. The instance was likely detached.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    post:
      tags:
      - Repository
      summary: Perform updates to the repository.
      operationId: RepositoryController.Update
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: The Tgstation.Server.Api.Models.Request.RepositoryUpdateRequest.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/RepositoryUpdateRequest'
              description: Represents a request to change the repository.
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/RepositoryUpdateRequest'
              description: Represents a request to change the repository.
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/RepositoryUpdateRequest'
              description: Represents a request to change the repository.
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/RepositoryUpdateRequest'
              description: Represents a request to change the repository.
        required: true
      responses:
        200:
          description: Updated the repository settings successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryResponse'
        202:
          description: Updated the repository settings successfully and a Tgstation.Server.Api.Models.Response.JobResponse was created to make the requested git changes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryResponse'
        410:
          description: The database entity for the requested instance could not be retrieved. The instance was likely detached.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Transfer:
    get:
      tags:
      - Transfer
      summary: Downloads a file with a given ticket.
      operationId: TransferController.Download
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: ticket
        in: query
        description: The Tgstation.Server.Api.Models.Response.FileTicketResponse.FileTicket for the download.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Started streaming download successfully.
          content:
            application/octet-stream:
              schema:
                type: string
                description: Very similar to Microsoft.AspNetCore.Mvc.FileStreamResult except it's Microsoft.AspNetCore.Mvc.Infrastructure.IActionResultExecutor`1 contains a fix for https://github.com/dotnet/aspnetcore/issues/28189.
                format: binary
        410:
          description: The ticket was no longer or was never valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    put:
      tags:
      - Transfer
      summary: Uploads a file with a given ticket.
      operationId: TransferController.Upload
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: ticket
        in: query
        description: The Tgstation.Server.Api.Models.Response.FileTicketResponse.FileTicket for the upload.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        204:
          description: Uploaded file successfully.
        410:
          description: The ticket was no longer or was never valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        409:
          description: An error occurred during the upload.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /User:
    put:
      tags:
      - User
      summary: Create a new Tgstation.Server.Host.Models.User.
      operationId: UserController.Create
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      requestBody:
        description: The Tgstation.Server.Api.Models.Request.UserCreateRequest.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserCreateRequest'
              description: For creating a user.
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserCreateRequest'
              description: For creating a user.
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserCreateRequest'
              description: For creating a user.
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserCreateRequest'
              description: For creating a user.
        required: true
      responses:
        201:
          description: Tgstation.Server.Host.Models.User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        410:
          description: The requested system identifier could not be found.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    post:
      tags:
      - User
      summary: Update a Tgstation.Server.Host.Models.User.
      operationId: UserController.Update
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      requestBody:
        description: The Tgstation.Server.Api.Models.Response.UserResponse to update.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserUpdateRequest'
              description: For editing a given user.
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserUpdateRequest'
              description: For editing a given user.
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserUpdateRequest'
              description: For editing a given user.
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserUpdateRequest'
              description: For editing a given user.
        required: true
      responses:
        200:
          description: Tgstation.Server.Host.Models.User updated successfully. Not returned due to lack of permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        204:
          description: No Content
        404:
          description: Requested Tgstation.Server.Api.Models.EntityId.Id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        410:
          description: Requested Tgstation.Server.Api.Models.Internal.UserApiBase.Group does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    get:
      tags:
      - User
      summary: Get information about the current Tgstation.Server.Host.Models.User.
      operationId: UserController.Read
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      responses:
        200:
          description: The Tgstation.Server.Host.Models.User was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /User/List:
    get:
      tags:
      - User
      summary: List all Tgstation.Server.Host.Models.Users in the server.
      operationId: UserController.List
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: page
        in: query
        description: The current page.
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: The page size.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Retrieved Tgstation.Server.Host.Models.Users successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /User/{id}:
    get:
      tags:
      - User
      summary: Get a specific Tgstation.Server.Host.Models.User.
      operationId: UserController.GetId
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: id
        in: path
        description: The Tgstation.Server.Api.Models.EntityId.Id to retrieve.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: The Tgstation.Server.Host.Models.User was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        404:
          description: The Tgstation.Server.Host.Models.User does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /UserGroup:
    put:
      tags:
      - UserGroup
      summary: Create a new Tgstation.Server.Host.Models.UserGroup.
      operationId: UserGroupController.Create
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      requestBody:
        description: The Tgstation.Server.Api.Models.Request.UserGroupCreateRequest.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserGroupCreateRequest'
              description: Request to create a user group.
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserGroupCreateRequest'
              description: Request to create a user group.
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserGroupCreateRequest'
              description: Request to create a user group.
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserGroupCreateRequest'
              description: Request to create a user group.
        required: true
      responses:
        201:
          description: Tgstation.Server.Host.Models.UserGroup created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    post:
      tags:
      - UserGroup
      summary: Update a Tgstation.Server.Host.Models.UserGroup.
      operationId: UserGroupController.Update
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      requestBody:
        description: The Tgstation.Server.Api.Models.Request.UserGroupUpdateRequest.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserGroupUpdateRequest'
              description: Request to update a user group.
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserGroupUpdateRequest'
              description: Request to update a user group.
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserGroupUpdateRequest'
              description: Request to update a user group.
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserGroupUpdateRequest'
              description: Request to update a user group.
        required: true
      responses:
        200:
          description: Tgstation.Server.Host.Models.UserGroup updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupResponse'
        410:
          description: The requested Tgstation.Server.Host.Models.UserGroup does not currently exist.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /UserGroup/{id}:
    get:
      tags:
      - UserGroup
      summary: Gets a specific Tgstation.Server.Host.Models.UserGroup.
      operationId: UserGroupController.GetId
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: id
        in: path
        description: The Tgstation.Server.Api.Models.EntityId.Id of the Tgstation.Server.Api.Models.Response.UserGroupResponse.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Retrieve Tgstation.Server.Host.Models.UserGroup successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupResponse'
        410:
          description: The requested Tgstation.Server.Host.Models.UserGroup does not currently exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    delete:
      tags:
      - UserGroup
      summary: Delete a Tgstation.Server.Host.Models.UserGroup.
      operationId: UserGroupController.Delete
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: id
        in: path
        description: The Tgstation.Server.Api.Models.EntityId.Id of the Tgstation.Server.Host.Models.UserGroup to delete.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: Tgstation.Server.Host.Models.UserGroup was deleted.
        409:
          description: The Tgstation.Server.Host.Models.UserGroup is not empty.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        410:
          description: The Tgstation.Server.Host.Models.UserGroup didn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /UserGroup/List:
    get:
      tags:
      - UserGroup
      summary: Lists all Tgstation.Server.Host.Models.UserGroups.
      operationId: UserGroupController.List
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: page
        in: query
        description: The current page.
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: The page size.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Retrieved Tgstation.Server.Host.Models.UserGroups successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserGroupResponse'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
components:
  schemas:
    AdministrationResponse:
      type: object
      properties:
        trackedRepositoryUrl:
          type: string
          description: The GitHub repository the server is built to recieve updates from.
          format: uri
        latestVersion:
          type: string
          description: The latest available version of the Tgstation.Server.Host assembly from the upstream repository. If System.Version.Major is not equal to 4 the update cannot be applied due to API changes.
      additionalProperties: false
      description: Represents administrative server information.
    AdministrationRights:
      enum:
      - 0
      - 1
      - 2
      - 4
      - 8
      - 16
      - 32
      - 64
      type: integer
      description: Administration rights for the server.
      format: int64
      x-enum-varnames:
      - None
      - WriteUsers
      - RestartHost
      - ChangeVersion
      - EditOwnPassword
      - ReadUsers
      - DownloadLogs
      - EditOwnOAuthConnections
    ByondInstallResponse:
      type: object
      properties:
        installJob:
          allOf:
          - $ref: '#/components/schemas/JobResponse'
          description: The Tgstation.Server.Api.Models.Response.JobResponse being used to install a new System.Version.
          nullable: true
        fileTicket:
          type: string
          nullable: true
      additionalProperties: false
      description: Represents a BYOND installation. Tgstation.Server.Api.Models.Response.FileTicketResponse.FileTicket is used to upload custom BYOND version zip files, though System.Version must still be set.
    ByondResponse:
      type: object
      properties:
        version:
          type: string
          description: The installed BYOND System.Version. BYOND itself only considers the System.Version.Major and System.Version.Minor numbers. TGS uses the System.Version.Build number to represent installed custom versions.
          nullable: true
      additionalProperties: false
      description: Represents an installed BYOND Tgstation.Server.Api.Models.Response.ByondResponse.Version.
    ByondRights:
      enum:
      - 0
      - 1
      - 2
      - 4
      - 8
      - 16
      - 32
      type: integer
      description: Rights for BYOND version management.
      format: int64
      x-enum-varnames:
      - None
      - ReadActive
      - ListInstalled
      - InstallOfficialOrChangeActiveVersion
      - CancelInstall
      - InstallCustomVersion
      - DeleteInstall
    ByondVersionDeleteRequest:
      type: object
      properties:
        version:
          type: string
          description: The BYOND version to install.
      additionalProperties: false
      description: A request to delete a specific Tgstation.Server.Api.Models.Request.ByondVersionDeleteRequest.Version.
    ByondVersionRequest:
      type: object
      properties:
        uploadCustomZip:
          type: boolean
          description: If a custom BYOND version is to be uploaded.
          nullable: true
        version:
          type: string
          description: The BYOND version to install.
      additionalProperties: false
      description: A request to install a BYOND Tgstation.Server.Api.Models.Request.ByondVersionDeleteRequest.Version.
    ChatBotCreateRequest:
      type: object
      properties:
        channels:
          type: array
          items:
            $ref: '#/components/schemas/ChatChannel'
          description: Channels the Discord bot should listen/announce in.
          nullable: true
        enabled:
          type: boolean
          description: If the connection is enabled.
          nullable: true
        reconnectionInterval:
          maximum: 4294967295
          minimum: 1
          type: integer
          description: The time interval in minutes the chat bot attempts to reconnect if Tgstation.Server.Api.Models.Internal.ChatBotSettings.Enabled and disconnected. Must not be zero.
          format: int32
          nullable: true
        channelLimit:
          type: integer
          description: The maximum number of Tgstation.Server.Api.Models.ChatChannels the Tgstation.Server.Api.Models.Internal.ChatBotSettings may contain.
          format: int32
          nullable: true
        provider:
          allOf:
          - $ref: '#/components/schemas/ChatProvider'
          description: The Tgstation.Server.Api.Models.ChatProvider used for the connection.
        connectionString:
          maxLength: 10000
          minLength: 0
          type: string
          description: The information used to connect to the Tgstation.Server.Api.Models.Internal.ChatBotSettings.Provider.
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: The name of the entity represented by the Tgstation.Server.Api.Models.NamedEntity.
      additionalProperties: false
      description: Represents a request to update a chat bot.
    ChatBotResponse:
      type: object
      properties:
        channels:
          type: array
          items:
            $ref: '#/components/schemas/ChatChannel'
          description: Channels the Discord bot should listen/announce in.
        enabled:
          type: boolean
          description: If the connection is enabled.
        reconnectionInterval:
          maximum: 4294967295
          minimum: 1
          type: integer
          description: The time interval in minutes the chat bot attempts to reconnect if Tgstation.Server.Api.Models.Internal.ChatBotSettings.Enabled and disconnected. Must not be zero.
          format: int32
        channelLimit:
          type: integer
          description: The maximum number of Tgstation.Server.Api.Models.ChatChannels the Tgstation.Server.Api.Models.Internal.ChatBotSettings may contain.
          format: int32
        provider:
          allOf:
          - $ref: '#/components/schemas/ChatProvider'
          description: The Tgstation.Server.Api.Models.ChatProvider used for the connection.
        connectionString:
          maxLength: 10000
          minLength: 0
          type: string
          description: The information used to connect to the Tgstation.Server.Api.Models.Internal.ChatBotSettings.Provider.
          nullable: true
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: The name of the entity represented by the Tgstation.Server.Api.Models.NamedEntity.
        id:
          type: integer
          description: The ID of the entity.
          format: int64
      additionalProperties: false
      description: Represents a chat bot response.
    ChatBotRights:
      enum:
      - 0
      - 1
      - 2
      - 4
      - 8
      - 16
      - 32
      - 64
      - 128
      - 256
      - 512
      - 1024
      type: integer
      description: Rights for chat bots.
      format: int64
      x-enum-varnames:
      - None
      - WriteEnabled
      - WriteProvider
      - WriteChannels
      - WriteConnectionString
      - ReadConnectionString
      - Read
      - Create
      - Delete
      - WriteName
      - WriteReconnectionInterval
      - WriteChannelLimit
    ChatBotUpdateRequest:
      type: object
      properties:
        channels:
          type: array
          items:
            $ref: '#/components/schemas/ChatChannel'
          description: Channels the Discord bot should listen/announce in.
          nullable: true
        enabled:
          type: boolean
          description: If the connection is enabled.
          nullable: true
        reconnectionInterval:
          maximum: 4294967295
          minimum: 1
          type: integer
          description: The time interval in minutes the chat bot attempts to reconnect if Tgstation.Server.Api.Models.Internal.ChatBotSettings.Enabled and disconnected. Must not be zero.
          format: int32
          nullable: true
        channelLimit:
          type: integer
          description: The maximum number of Tgstation.Server.Api.Models.ChatChannels the Tgstation.Server.Api.Models.Internal.ChatBotSettings may contain.
          format: int32
          nullable: true
        provider:
          allOf:
          - $ref: '#/components/schemas/ChatProvider'
          description: The Tgstation.Server.Api.Models.ChatProvider used for the connection.
          nullable: true
        connectionString:
          maxLength: 10000
          minLength: 0
          type: string
          description: The information used to connect to the Tgstation.Server.Api.Models.Internal.ChatBotSettings.Provider.
          nullable: true
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: The name of the entity represented by the Tgstation.Server.Api.Models.NamedEntity.
          nullable: true
        id:
          type: integer
          description: The ID of the entity.
          format: int64
      additionalProperties: false
      description: Represents a request to update a chat bot.
    ChatChannel:
      type: object
      properties:
        channelData:
          maxLength: 100
          minLength: 1
          type: string
          description: >-
            The channel identifier. Supercedes Tgstation.Server.Api.Models.ChatChannel.IrcChannel and Tgstation.Server.Api.Models.ChatChannel.DiscordChannelId.

            For Tgstation.Server.Api.Models.ChatProvider.Irc, it's the IRC channel name and optional password colon separated.

            For Tgstation.Server.Api.Models.ChatProvider.Discord, it's the stringified Discord channel snowflake.
        ircChannel:
          maxLength: 100
          minLength: 1
          type: string
          description: >-
            The IRC channel name. Also potentially contains the channel passsword (if separated by a colon).

            If multiple copies of the same channel with different keys are added to the server, the one that will be used is undefined.
          nullable: true
          deprecated: true
        discordChannelId:
          type: integer
          description: The Discord channel ID.
          format: int64
          nullable: true
          deprecated: true
        isAdminChannel:
          type: boolean
          description: If the Tgstation.Server.Api.Models.ChatChannel is an admin channel.
        isWatchdogChannel:
          type: boolean
          description: If the Tgstation.Server.Api.Models.ChatChannel is a watchdog channel.
        isUpdatesChannel:
          type: boolean
          description: If the Tgstation.Server.Api.Models.ChatChannel is an updates channel.
        tag:
          maxLength: 10000
          minLength: 0
          type: string
          description: A custom tag users can define to group channels together.
          nullable: true
      additionalProperties: false
      description: Indicates a chat channel.
    ChatProvider:
      enum:
      - 0
      - 1
      type: integer
      description: Represents a chat service provider.
      format: int32
      x-enum-varnames:
      - Irc
      - Discord
    CompileJobResponse:
      type: object
      properties:
        job:
          allOf:
          - $ref: '#/components/schemas/JobResponse'
          description: The Tgstation.Server.Api.Models.Response.CompileJobResponse.Job relating to this job.
        revisionInformation:
          allOf:
          - $ref: '#/components/schemas/RevisionInformation'
          description: Git revision the compiler ran on.
        byondVersion:
          type: string
          description: The Tgstation.Server.Api.Models.Response.ByondResponse.Version the Tgstation.Server.Api.Models.Response.CompileJobResponse was made with.
        repositoryOrigin:
          type: string
          description: The origin System.Uri of the repository the compile job was built from.
          format: uri
        dmeName:
          minLength: 1
          type: string
          description: The .dme file used for compilation.
        output:
          minLength: 1
          type: string
          description: Textual output of DM.
        directoryName:
          type: string
          description: The Game folder the results were compiled into.
          format: uuid
        minimumSecurityLevel:
          allOf:
          - $ref: '#/components/schemas/DreamDaemonSecurity'
          description: The minimum Tgstation.Server.Api.Models.DreamDaemonSecurity required to run the Tgstation.Server.Api.Models.Internal.CompileJob's output.
          nullable: true
        dmApiVersion:
          type: string
          description: The DMAPI System.Version.
          nullable: true
        id:
          type: integer
          description: The ID of the entity.
          format: int64
      additionalProperties: false
    ConfigurationFileRequest:
      type: object
      properties:
        path:
          type: string
        lastReadHash:
          type: string
          nullable: true
      additionalProperties: false
      description: Represents a request to update a configuration file.
    ConfigurationFileResponse:
      type: object
      properties:
        path:
          type: string
        lastReadHash:
          type: string
          nullable: true
        isDirectory:
          type: boolean
          description: If Tgstation.Server.Api.Models.Response.ConfigurationFileResponse.Path represents a directory.
        accessDenied:
          type: boolean
          description: If access to the Tgstation.Server.Api.Models.IConfigurationFile file was denied for the operation.
          nullable: true
        fileTicket:
          type: string
          description: The ticket to use to access the Tgstation.Server.Api.Routes.Transfer controller.
      additionalProperties: false
      description: Response when reading configuration files.
    ConfigurationRights:
      enum:
      - 0
      - 1
      - 2
      - 4
      - 8
      type: integer
      description: Rights for Tgstation.Server.Api.Models.IConfigurationFiles.
      format: int64
      x-enum-varnames:
      - None
      - Read
      - Write
      - List
      - Delete
    ConfigurationType:
      enum:
      - 0
      - 1
      - 2
      type: integer
      description: The type of configuration allowed on an Tgstation.Server.Api.Models.Instance.
      format: int32
      x-enum-varnames:
      - Disallowed
      - HostWrite
      - SystemIdentityWrite
    DreamDaemonRequest:
      type: object
      properties:
        softRestart:
          type: boolean
          description: If the server is undergoing a soft reset. This may be automatically set by changes to other fields.
          nullable: true
        softShutdown:
          type: boolean
          description: If the server is undergoing a soft shutdown.
          nullable: true
        autoStart:
          type: boolean
          description: If the watchdog starts when it's Tgstation.Server.Api.Models.Instance starts.
          nullable: true
        allowWebClient:
          type: boolean
          description: If the BYOND web client can be used to connect to the game server.
          nullable: true
        startProfiler:
          type: boolean
          description: If -profile is passed in on the DreamDaemon command line.
          nullable: true
        visibility:
          allOf:
          - $ref: '#/components/schemas/DreamDaemonVisibility'
          description: The Tgstation.Server.Api.Models.DreamDaemonVisibility level of DreamDaemon.
          nullable: true
        securityLevel:
          allOf:
          - $ref: '#/components/schemas/DreamDaemonSecurity'
          description: The Tgstation.Server.Api.Models.DreamDaemonSecurity level of DreamDaemon.
          nullable: true
        port:
          maximum: 65535
          minimum: 1
          type: integer
          description: The port DreamDaemon uses. This should be publically accessible.
          format: int32
          nullable: true
        startupTimeout:
          maximum: 4294967295
          minimum: 1
          type: integer
          description: The DreamDaemon startup timeout in seconds.
          format: int32
          nullable: true
        heartbeatSeconds:
          type: integer
          description: The number of seconds between each watchdog heartbeat. 0 disables.
          format: int32
          nullable: true
        dumpOnHeartbeatRestart:
          type: boolean
          description: If a process core dump should be created prior to restarting the watchdog due to heartbeat failure.
          nullable: true
        topicRequestTimeout:
          maximum: 4294967295
          minimum: 1
          type: integer
          description: The timeout for sending and receiving BYOND topics in milliseconds.
          format: int32
          nullable: true
        additionalParameters:
          maxLength: 10000
          minLength: 0
          type: string
          description: Parameters string for DreamDaemon.
          nullable: true
        logOutput:
          type: boolean
          description: If process output/error text should be logged.
          nullable: true
      additionalProperties: false
      description: A request to update Tgstation.Server.Api.Models.Internal.DreamDaemonSettings.
    DreamDaemonResponse:
      type: object
      properties:
        activeCompileJob:
          allOf:
          - $ref: '#/components/schemas/CompileJobResponse'
          description: The live revision.
          nullable: true
        stagedCompileJob:
          allOf:
          - $ref: '#/components/schemas/CompileJobResponse'
          description: The next revision to go live.
          nullable: true
        status:
          allOf:
          - $ref: '#/components/schemas/WatchdogStatus'
          description: The current Tgstation.Server.Api.Models.WatchdogStatus.
          nullable: true
        currentSecurity:
          allOf:
          - $ref: '#/components/schemas/DreamDaemonSecurity'
          description: The current Tgstation.Server.Api.Models.DreamDaemonSecurity. May be upgraded. due to requirements of Tgstation.Server.Api.Models.Response.DreamDaemonResponse.ActiveCompileJob.
          nullable: true
        currentVisibility:
          allOf:
          - $ref: '#/components/schemas/DreamDaemonVisibility'
          description: The current Tgstation.Server.Api.Models.DreamDaemonVisibility.
          nullable: true
        currentPort:
          type: integer
          description: The port the running Tgstation.Server.Api.Models.Response.DreamDaemonResponse instance is set to.
          format: int32
          nullable: true
        currentAllowWebclient:
          type: boolean
          description: The webclient status the running Tgstation.Server.Api.Models.Response.DreamDaemonResponse instance is set to.
          nullable: true
        softRestart:
          type: boolean
          description: If the server is undergoing a soft reset. This may be automatically set by changes to other fields.
          nullable: true
        softShutdown:
          type: boolean
          description: If the server is undergoing a soft shutdown.
          nullable: true
        autoStart:
          type: boolean
          description: If the watchdog starts when it's Tgstation.Server.Api.Models.Instance starts.
          nullable: true
        allowWebClient:
          type: boolean
          description: If the BYOND web client can be used to connect to the game server.
          nullable: true
        startProfiler:
          type: boolean
          description: If -profile is passed in on the DreamDaemon command line.
          nullable: true
        visibility:
          allOf:
          - $ref: '#/components/schemas/DreamDaemonVisibility'
          description: The Tgstation.Server.Api.Models.DreamDaemonVisibility level of DreamDaemon.
          nullable: true
        securityLevel:
          allOf:
          - $ref: '#/components/schemas/DreamDaemonSecurity'
          description: The Tgstation.Server.Api.Models.DreamDaemonSecurity level of DreamDaemon.
          nullable: true
        port:
          maximum: 65535
          minimum: 1
          type: integer
          description: The port DreamDaemon uses. This should be publically accessible.
          format: int32
          nullable: true
        startupTimeout:
          maximum: 4294967295
          minimum: 1
          type: integer
          description: The DreamDaemon startup timeout in seconds.
          format: int32
          nullable: true
        heartbeatSeconds:
          type: integer
          description: The number of seconds between each watchdog heartbeat. 0 disables.
          format: int32
          nullable: true
        dumpOnHeartbeatRestart:
          type: boolean
          description: If a process core dump should be created prior to restarting the watchdog due to heartbeat failure.
          nullable: true
        topicRequestTimeout:
          maximum: 4294967295
          minimum: 1
          type: integer
          description: The timeout for sending and receiving BYOND topics in milliseconds.
          format: int32
          nullable: true
        additionalParameters:
          maxLength: 10000
          minLength: 0
          type: string
          description: Parameters string for DreamDaemon.
          nullable: true
        logOutput:
          type: boolean
          description: If process output/error text should be logged.
          nullable: true
      additionalProperties: false
      description: Represents an instance of BYOND's DreamDaemon game server. Create action starts the server. Delete action shuts down the server.
    DreamDaemonRights:
      enum:
      - 0
      - 1
      - 2
      - 4
      - 8
      - 16
      - 32
      - 64
      - 128
      - 256
      - 512
      - 1024
      - 2048
      - 4096
      - 8192
      - 16384
      - 32768
      - 65536
      - 131072
      - 262144
      type: integer
      description: Rights for managing DreamDaemon.
      format: int64
      x-enum-varnames:
      - None
      - ReadRevision
      - SetPort
      - SetAutoStart
      - SetSecurity
      - ReadMetadata
      - SetWebClient
      - SoftRestart
      - SoftShutdown
      - Restart
      - Shutdown
      - Start
      - SetStartupTimeout
      - SetHeartbeatInterval
      - CreateDump
      - SetTopicTimeout
      - SetAdditionalParameters
      - SetVisibility
      - SetProfiler
      - SetLogOutput
    DreamDaemonSecurity:
      enum:
      - 0
      - 1
      - 2
      type: integer
      description: DreamDaemon's security level.
      format: int32
      x-enum-varnames:
      - Trusted
      - Safe
      - Ultrasafe
    DreamDaemonVisibility:
      enum:
      - 0
      - 1
      - 2
      type: integer
      description: The visibility setting for DreamDaemon.
      format: int32
      x-enum-varnames:
      - Public
      - Private
      - Invisible
    DreamMakerRequest:
      type: object
      properties:
        projectName:
          maxLength: 10000
          minLength: 0
          type: string
          description: The name of the .dme file the server tries to compile with without the extension.
          nullable: true
        apiValidationPort:
          maximum: 65535
          minimum: 1
          type: integer
          description: The port used during compilation to validate the DMAPI.
          format: int32
          nullable: true
        apiValidationSecurityLevel:
          allOf:
          - $ref: '#/components/schemas/DreamDaemonSecurity'
          description: The Tgstation.Server.Api.Models.DreamDaemonSecurity level used to validate the DMAPI.
          nullable: true
        requireDMApiValidation:
          type: boolean
          description: If API validation should be required for a deployment to succeed.
          nullable: true
        timeout:
          type: string
          description: Amount of time before an in-progress deployment is cancelled.
          format: date-span
          nullable: true
      additionalProperties: false
      description: A request to the DreamMaker controller.
    DreamMakerResponse:
      type: object
      properties:
        projectName:
          maxLength: 10000
          minLength: 0
          type: string
          description: The name of the .dme file the server tries to compile with without the extension.
          nullable: true
        apiValidationPort:
          maximum: 65535
          minimum: 1
          type: integer
          description: The port used during compilation to validate the DMAPI.
          format: int32
        apiValidationSecurityLevel:
          allOf:
          - $ref: '#/components/schemas/DreamDaemonSecurity'
          description: The Tgstation.Server.Api.Models.DreamDaemonSecurity level used to validate the DMAPI.
        requireDMApiValidation:
          type: boolean
          description: If API validation should be required for a deployment to succeed.
        timeout:
          type: string
          description: Amount of time before an in-progress deployment is cancelled.
          format: date-span
      additionalProperties: false
      description: A request to the DreamMaker controller.
    DreamMakerRights:
      enum:
      - 0
      - 1
      - 2
      - 4
      - 8
      - 16
      - 32
      - 64
      - 128
      - 256
      type: integer
      description: Rights for deployment.
      format: int64
      x-enum-varnames:
      - None
      - Read
      - Compile
      - CancelCompile
      - SetDme
      - SetApiValidationPort
      - CompileJobs
      - SetSecurityLevel
      - SetApiValidationRequirement
      - SetTimeout
    EntityId:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the entity.
          format: int64
          nullable: true
      additionalProperties: false
      description: Common base of entities with IDs.
    ErrorCode:
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10
      - 11
      - 12
      - 13
      - 14
      - 15
      - 16
      - 17
      - 18
      - 19
      - 20
      - 21
      - 22
      - 23
      - 24
      - 25
      - 26
      - 27
      - 28
      - 29
      - 30
      - 31
      - 32
      - 33
      - 34
      - 35
      - 36
      - 37
      - 38
      - 39
      - 40
      - 41
      - 42
      - 43
      - 44
      - 45
      - 46
      - 47
      - 48
      - 49
      - 50
      - 51
      - 52
      - 53
      - 54
      - 55
      - 56
      - 57
      - 58
      - 59
      - 60
      - 61
      - 62
      - 63
      - 64
      - 65
      - 66
      - 67
      - 68
      - 69
      - 70
      - 71
      - 72
      - 73
      - 74
      - 75
      - 76
      - 77
      - 78
      - 79
      - 80
      - 81
      - 82
      - 83
      - 84
      - 85
      - 86
      - 87
      - 88
      - 89
      - 90
      - 91
      - 92
      - 93
      - 94
      - 95
      - 96
      - 97
      - 98
      - 99
      - 100
      - 101
      - 102
      type: integer
      description: Types of Tgstation.Server.Api.Models.Response.ErrorMessageResponses that the API may return.
      format: int32
      x-enum-varnames:
      - InternalServerError
      - ApiMismatch
      - ModelValidationFailure
      - IOError
      - BadHeaders
      - TokenWithToken
      - DatabaseIntegrityConflict
      - MissingHostWatchdog
      - CannotChangeServerSuite
      - RemoteApiError
      - ServerUpdateInProgress
      - UserNameChange
      - UserSidChange
      - UserMismatchNameSid
      - UserMismatchPasswordSid
      - UserPasswordLength
      - UserColonInName
      - UserMissingName
      - InstanceRelocateOnline
      - InstanceAtExistingPath
      - InstanceDetachOnline
      - InstanceAtConflictingPath
      - InstanceLimitReached
      - InstanceWhitespaceName
      - InstanceHeaderRequired
      - RequiresPosixSystemIdentity
      - ConfigurationFileUpdated
      - ConfigurationDirectoryNotEmpty
      - SwarmIntegrityCheckFailed
      - RepoMismatchUserAndAccessToken
      - RepoCloning
      - RepoBusy
      - RepoExists
      - RepoMissing
      - RepoMismatchShaAndReference
      - RepoMismatchShaAndUpdate
      - ByondCannotDeleteActiveVersion
      - RepoDuplicateTestMerge
      - RepoWhitespaceCommitterName
      - RepoWhitespaceCommitterEmail
      - ApiPageTooLarge
      - ApiInvalidPageOrPageSize
      - ChatBotWrongChannelType
      - ChatBotWhitespaceConnectionString
      - ChatBotWhitespaceName
      - ChatBotProviderMissing
      - DEPRECATED_UnusedErrorCode3
      - ChatBotMax
      - ChatBotMaxChannels
      - ByondDirectXInstallFail
      - ByondDownloadFail
      - ByondNoVersionsInstalled
      - DreamMakerNeverValidated
      - DreamMakerInvalidValidation
      - CannotRemoveLastAuthenticationOption
      - DreamMakerNoDme
      - DreamMakerMissingDme
      - DreamMakerExitCode
      - DreamMakerCompileJobInProgress
      - InstanceMissingDreamDaemonSettings
      - InstanceMissingDreamMakerSettings
      - InstanceMissingRepositorySettings
      - InstanceUpdateTestMergeConflict
      - RepoCredentialsRequired
      - RepoCannotAuthenticate
      - RepoReferenceRequired
      - WatchdogRunning
      - WatchdogCompileJobCorrupted
      - WatchdogStartupFailed
      - WatchdogStartupTimeout
      - RepoUnsupportedTestMergeRemote
      - RepoSwappedShaOrReference
      - RepoMergeConflict
      - RepoReferenceNotTracking
      - RepoTestMergeConflict
      - InstanceNotAtWhitelistedPath
      - DreamDaemonDoubleSoft
      - DeploymentPagerRunning
      - DreamDaemonPortInUse
      - PostDeployFailure
      - WatchdogNotRunning
      - ResourceNotPresent
      - ResourceNeverPresent
      - GitHubApiRateLimit
      - JobStopped
      - MissingGCore
      - GCoreFailure
      - RepoTestMergeInvalidRemote
      - ByondNonExistentCustomVersion
      - DreamDaemonOffline
      - InstanceOffline
      - ChatCannotConnectProvider
      - ByondDreamDaemonFirewallFail
      - NoPortsAvailable
      - PortNotAvailable
      - AdminUserCannotOAuth
      - OAuthProviderDisabled
      - FileUploadExpired
      - UserGroupAndPermissionSet
      - UserGroupNotEmpty
      - UserLimitReached
      - UserGroupLimitReached
      - DeploymentTimeout
    ErrorMessageResponse:
      type: object
      properties:
        serverApiVersion:
          type: string
          description: The version of the API the server is using.
        message:
          type: string
          description: A human readable description of the error.
        additionalData:
          type: string
          description: Additional data associated with the error message.
          nullable: true
        errorCode:
          allOf:
          - $ref: '#/components/schemas/ErrorCode'
          description: The Tgstation.Server.Api.Models.Response.ErrorMessageResponse.ErrorCode of the Tgstation.Server.Api.Models.Response.ErrorMessageResponse.
      additionalProperties: false
      description: Represents an error message returned by the server.
    InstanceCreateRequest:
      type: object
      properties:
        path:
          minLength: 1
          type: string
          description: The path to where the Tgstation.Server.Api.Models.Instance is located. Can only be changed while the Tgstation.Server.Api.Models.Instance is offline. Must not exist when the instance is created.
        configurationType:
          allOf:
          - $ref: '#/components/schemas/ConfigurationType'
          description: If Tgstation.Server.Api.Models.IConfigurationFiles can be used on the Tgstation.Server.Api.Models.Instance.
          nullable: true
        autoUpdateInterval:
          type: integer
          description: The time interval in minutes the repository is automatically pulled and compiles. 0 disables.
          format: int32
          nullable: true
        chatBotLimit:
          type: integer
          description: The maximum number of chat bots the Tgstation.Server.Api.Models.Instance may contain.
          format: int32
          nullable: true
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: The name of the entity represented by the Tgstation.Server.Api.Models.NamedEntity.
      additionalProperties: false
      description: A request to create an Tgstation.Server.Api.Models.Instance.
    InstanceManagerRights:
      enum:
      - 0
      - 1
      - 2
      - 4
      - 8
      - 16
      - 32
      - 64
      - 128
      - 256
      - 512
      - 1024
      type: integer
      description: Rights for managing Tgstation.Server.Api.Models.Instances.
      format: int64
      x-enum-varnames:
      - None
      - Read
      - Create
      - Rename
      - Relocate
      - SetOnline
      - Delete
      - List
      - SetConfiguration
      - SetAutoUpdate
      - SetChatBotLimit
      - GrantPermissions
    InstancePermissionSetRequest:
      type: object
      properties:
        permissionSetId:
          type: integer
          description: The Tgstation.Server.Api.Models.EntityId.Id of the Tgstation.Server.Api.Models.PermissionSet the Tgstation.Server.Api.Models.Internal.InstancePermissionSet belongs to.
          format: int64
        instancePermissionSetRights:
          allOf:
          - $ref: '#/components/schemas/InstancePermissionSetRights'
          description: The Tgstation.Server.Api.Rights.InstancePermissionSetRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet.
          nullable: true
        byondRights:
          allOf:
          - $ref: '#/components/schemas/ByondRights'
          description: The Tgstation.Server.Api.Rights.ByondRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet.
          nullable: true
        dreamDaemonRights:
          allOf:
          - $ref: '#/components/schemas/DreamDaemonRights'
          description: The Tgstation.Server.Api.Rights.DreamDaemonRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet.
          nullable: true
        dreamMakerRights:
          allOf:
          - $ref: '#/components/schemas/DreamMakerRights'
          description: The Tgstation.Server.Api.Rights.DreamMakerRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet.
          nullable: true
        repositoryRights:
          allOf:
          - $ref: '#/components/schemas/RepositoryRights'
          description: The Tgstation.Server.Api.Rights.RepositoryRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet.
          nullable: true
        chatBotRights:
          allOf:
          - $ref: '#/components/schemas/ChatBotRights'
          description: The Tgstation.Server.Api.Rights.ChatBotRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet.
          nullable: true
        configurationRights:
          allOf:
          - $ref: '#/components/schemas/ConfigurationRights'
          description: The Tgstation.Server.Api.Rights.ConfigurationRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet.
          nullable: true
      additionalProperties: false
      description: A request to update an instance permission set.
    InstancePermissionSetResponse:
      type: object
      properties:
        permissionSetId:
          type: integer
          description: The Tgstation.Server.Api.Models.EntityId.Id of the Tgstation.Server.Api.Models.PermissionSet the Tgstation.Server.Api.Models.Internal.InstancePermissionSet belongs to.
          format: int64
        instancePermissionSetRights:
          allOf:
          - $ref: '#/components/schemas/InstancePermissionSetRights'
          description: The Tgstation.Server.Api.Rights.InstancePermissionSetRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet.
        byondRights:
          allOf:
          - $ref: '#/components/schemas/ByondRights'
          description: The Tgstation.Server.Api.Rights.ByondRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet.
        dreamDaemonRights:
          allOf:
          - $ref: '#/components/schemas/DreamDaemonRights'
          description: The Tgstation.Server.Api.Rights.DreamDaemonRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet.
        dreamMakerRights:
          allOf:
          - $ref: '#/components/schemas/DreamMakerRights'
          description: The Tgstation.Server.Api.Rights.DreamMakerRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet.
        repositoryRights:
          allOf:
          - $ref: '#/components/schemas/RepositoryRights'
          description: The Tgstation.Server.Api.Rights.RepositoryRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet.
        chatBotRights:
          allOf:
          - $ref: '#/components/schemas/ChatBotRights'
          description: The Tgstation.Server.Api.Rights.ChatBotRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet.
        configurationRights:
          allOf:
          - $ref: '#/components/schemas/ConfigurationRights'
          description: The Tgstation.Server.Api.Rights.ConfigurationRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet.
      additionalProperties: false
      description: A response containing an instance permission set.
    InstancePermissionSetRights:
      enum:
      - 0
      - 1
      - 2
      - 4
      type: integer
      description: Rights for an Tgstation.Server.Api.Models.Instance.
      format: int64
      x-enum-varnames:
      - None
      - Read
      - Write
      - Create
    InstanceResponse:
      type: object
      properties:
        moveJob:
          allOf:
          - $ref: '#/components/schemas/JobResponse'
          description: The Tgstation.Server.Api.Models.Response.JobResponse representing a change of Tgstation.Server.Api.Models.Instance.Path.
          nullable: true
        accessible:
          type: boolean
          description: If the querying user may access this instance.
        path:
          minLength: 1
          type: string
          description: The path to where the Tgstation.Server.Api.Models.Instance is located. Can only be changed while the Tgstation.Server.Api.Models.Instance is offline. Must not exist when the instance is created.
        online:
          type: boolean
          description: If the Tgstation.Server.Api.Models.Instance is online.
        configurationType:
          allOf:
          - $ref: '#/components/schemas/ConfigurationType'
          description: If Tgstation.Server.Api.Models.IConfigurationFiles can be used on the Tgstation.Server.Api.Models.Instance.
        autoUpdateInterval:
          type: integer
          description: The time interval in minutes the repository is automatically pulled and compiles. 0 disables.
          format: int32
        chatBotLimit:
          type: integer
          description: The maximum number of chat bots the Tgstation.Server.Api.Models.Instance may contain.
          format: int32
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: The name of the entity represented by the Tgstation.Server.Api.Models.NamedEntity.
        id:
          type: integer
          description: The ID of the entity.
          format: int64
      additionalProperties: false
      description: Server response for Tgstation.Server.Api.Models.Instances.
    InstanceUpdateRequest:
      type: object
      properties:
        path:
          minLength: 1
          type: string
          description: The path to where the Tgstation.Server.Api.Models.Instance is located. Can only be changed while the Tgstation.Server.Api.Models.Instance is offline. Must not exist when the instance is created.
          nullable: true
        online:
          type: boolean
          description: If the Tgstation.Server.Api.Models.Instance is online.
          nullable: true
        configurationType:
          allOf:
          - $ref: '#/components/schemas/ConfigurationType'
          description: If Tgstation.Server.Api.Models.IConfigurationFiles can be used on the Tgstation.Server.Api.Models.Instance.
          nullable: true
        autoUpdateInterval:
          type: integer
          description: The time interval in minutes the repository is automatically pulled and compiles. 0 disables.
          format: int32
          nullable: true
        chatBotLimit:
          type: integer
          description: The maximum number of chat bots the Tgstation.Server.Api.Models.Instance may contain.
          format: int32
          nullable: true
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: The name of the entity represented by the Tgstation.Server.Api.Models.NamedEntity.
          nullable: true
        id:
          type: integer
          description: The ID of the entity.
          format: int64
      additionalProperties: false
      description: A request to update an Tgstation.Server.Api.Models.Instance.
    JobResponse:
      type: object
      properties:
        startedBy:
          allOf:
          - $ref: '#/components/schemas/ShallowUserResponse'
          description: The Tgstation.Server.Api.Models.Response.UserResponse that started the job.
        cancelledBy:
          allOf:
          - $ref: '#/components/schemas/ShallowUserResponse'
          description: The Tgstation.Server.Api.Models.Response.UserResponse that cancelled the job.
          nullable: true
        progress:
          type: integer
          description: Optional progress between 0 and 100 inclusive.
          format: int32
          nullable: true
        stage:
          type: string
          description: Optional description of the job's current .
          nullable: true
        description:
          minLength: 1
          type: string
          description: English description of the Tgstation.Server.Api.Models.Internal.Job.
        errorCode:
          allOf:
          - $ref: '#/components/schemas/ErrorCode'
          description: The Tgstation.Server.Api.Models.ErrorCode associated with the Tgstation.Server.Api.Models.Internal.Job if any.
          nullable: true
        exceptionDetails:
          type: string
          description: Details of any exceptions caught during the Tgstation.Server.Api.Models.Internal.Job.
          nullable: true
        startedAt:
          type: string
          description: When the Tgstation.Server.Api.Models.Internal.Job was started.
          format: date-time
        stoppedAt:
          type: string
          description: When the Tgstation.Server.Api.Models.Internal.Job stopped.
          format: date-time
          nullable: true
        cancelled:
          type: boolean
          description: If the Tgstation.Server.Api.Models.Internal.Job was cancelled.
        cancelRightsType:
          allOf:
          - $ref: '#/components/schemas/RightsType'
          description: The Tgstation.Server.Api.Rights.RightsType of Tgstation.Server.Api.Models.Internal.Job.CancelRight if it can be cancelled.
          nullable: true
        cancelRight:
          type: integer
          description: The N:Tgstation.Server.Api.Rights required to cancel the Tgstation.Server.Api.Models.Internal.Job.
          format: int64
          nullable: true
        id:
          type: integer
          description: The ID of the entity.
          format: int64
      additionalProperties: false
      description: Represents a long running job on the server. Model is read-only, updates attempt to cancel the job.
    LogFileResponse:
      type: object
      properties:
        name:
          type: string
          description: The name of the log file.
        lastModified:
          type: string
          description: The System.DateTimeOffset of when the log file was modified.
          format: date-time
        fileTicket:
          type: string
          description: The ticket to use to access the Tgstation.Server.Api.Routes.Transfer controller.
      additionalProperties: false
      description: Represents a server log file.
    OAuthConnection:
      type: object
      properties:
        provider:
          allOf:
          - $ref: '#/components/schemas/OAuthProvider'
          description: The Tgstation.Server.Api.Models.OAuthProvider of the Tgstation.Server.Api.Models.OAuthConnection.
        externalUserId:
          maxLength: 100
          minLength: 1
          type: string
          description: The ID of the user in the Tgstation.Server.Api.Models.OAuthConnection.Provider.
      additionalProperties: false
      description: Represents a valid OAuth connection.
    OAuthProvider:
      enum:
      - GitHub
      - Discord
      - TGForums
      - Keycloak
      - InvisionCommunity
      type: string
      description: List of OAuth providers supported by TGS.
      x-enum-varnames:
      - GitHub
      - Discord
      - TGForums
      - Keycloak
      - InvisionCommunity
    OAuthProviderInfo:
      type: object
      properties:
        clientId:
          type: string
          description: The client ID.
        redirectUri:
          type: string
          description: The redirect URL.
          format: uri
        serverUrl:
          type: string
          description: The server URL.
          format: uri
          nullable: true
      additionalProperties: false
      description: Public information about a given Tgstation.Server.Api.Models.OAuthProvider.
    PaginatedByondResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ByondResponse'
          description: The System.Collections.Generic.ICollection`1 of the returned <typeparamref name="TModel" />s.
        totalPages:
          type: integer
          description: The total number of pages in the query.
          format: int32
        pageSize:
          type: integer
          description: The current size of pages in the query.
          format: int32
        totalItems:
          type: integer
          description: The total items across all pages.
          format: int32
      additionalProperties: false
      description: Represents a paginated set of models.
    PaginatedChatBotResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ChatBotResponse'
          description: The System.Collections.Generic.ICollection`1 of the returned <typeparamref name="TModel" />s.
        totalPages:
          type: integer
          description: The total number of pages in the query.
          format: int32
        pageSize:
          type: integer
          description: The current size of pages in the query.
          format: int32
        totalItems:
          type: integer
          description: The total items across all pages.
          format: int32
      additionalProperties: false
      description: Represents a paginated set of models.
    PaginatedCompileJobResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CompileJobResponse'
          description: The System.Collections.Generic.ICollection`1 of the returned <typeparamref name="TModel" />s.
        totalPages:
          type: integer
          description: The total number of pages in the query.
          format: int32
        pageSize:
          type: integer
          description: The current size of pages in the query.
          format: int32
        totalItems:
          type: integer
          description: The total items across all pages.
          format: int32
      additionalProperties: false
      description: Represents a paginated set of models.
    PaginatedConfigurationFileResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ConfigurationFileResponse'
          description: The System.Collections.Generic.ICollection`1 of the returned <typeparamref name="TModel" />s.
        totalPages:
          type: integer
          description: The total number of pages in the query.
          format: int32
        pageSize:
          type: integer
          description: The current size of pages in the query.
          format: int32
        totalItems:
          type: integer
          description: The total items across all pages.
          format: int32
      additionalProperties: false
      description: Represents a paginated set of models.
    PaginatedInstancePermissionSetResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/InstancePermissionSetResponse'
          description: The System.Collections.Generic.ICollection`1 of the returned <typeparamref name="TModel" />s.
        totalPages:
          type: integer
          description: The total number of pages in the query.
          format: int32
        pageSize:
          type: integer
          description: The current size of pages in the query.
          format: int32
        totalItems:
          type: integer
          description: The total items across all pages.
          format: int32
      additionalProperties: false
      description: Represents a paginated set of models.
    PaginatedInstanceResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/InstanceResponse'
          description: The System.Collections.Generic.ICollection`1 of the returned <typeparamref name="TModel" />s.
        totalPages:
          type: integer
          description: The total number of pages in the query.
          format: int32
        pageSize:
          type: integer
          description: The current size of pages in the query.
          format: int32
        totalItems:
          type: integer
          description: The total items across all pages.
          format: int32
      additionalProperties: false
      description: Represents a paginated set of models.
    PaginatedJobResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/JobResponse'
          description: The System.Collections.Generic.ICollection`1 of the returned <typeparamref name="TModel" />s.
        totalPages:
          type: integer
          description: The total number of pages in the query.
          format: int32
        pageSize:
          type: integer
          description: The current size of pages in the query.
          format: int32
        totalItems:
          type: integer
          description: The total items across all pages.
          format: int32
      additionalProperties: false
      description: Represents a paginated set of models.
    PaginatedLogFileResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/LogFileResponse'
          description: The System.Collections.Generic.ICollection`1 of the returned <typeparamref name="TModel" />s.
        totalPages:
          type: integer
          description: The total number of pages in the query.
          format: int32
        pageSize:
          type: integer
          description: The current size of pages in the query.
          format: int32
        totalItems:
          type: integer
          description: The total items across all pages.
          format: int32
      additionalProperties: false
      description: Represents a paginated set of models.
    PaginatedUserGroupResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserGroupResponse'
          description: The System.Collections.Generic.ICollection`1 of the returned <typeparamref name="TModel" />s.
        totalPages:
          type: integer
          description: The total number of pages in the query.
          format: int32
        pageSize:
          type: integer
          description: The current size of pages in the query.
          format: int32
        totalItems:
          type: integer
          description: The total items across all pages.
          format: int32
      additionalProperties: false
      description: Represents a paginated set of models.
    PaginatedUserResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
          description: The System.Collections.Generic.ICollection`1 of the returned <typeparamref name="TModel" />s.
        totalPages:
          type: integer
          description: The total number of pages in the query.
          format: int32
        pageSize:
          type: integer
          description: The current size of pages in the query.
          format: int32
        totalItems:
          type: integer
          description: The total items across all pages.
          format: int32
      additionalProperties: false
      description: Represents a paginated set of models.
    PermissionSet:
      type: object
      properties:
        id:
          type: integer
          format: int64
          nullable: true
          readOnly: true
        administrationRights:
          allOf:
          - $ref: '#/components/schemas/AdministrationRights'
          description: The Tgstation.Server.Api.Rights.AdministrationRights for the user.
        instanceManagerRights:
          allOf:
          - $ref: '#/components/schemas/InstanceManagerRights'
          description: The Tgstation.Server.Api.Rights.InstanceManagerRights for the user.
      additionalProperties: false
      description: Represents a set of server permissions.
    RemoteGitProvider:
      enum:
      - 0
      - 1
      - 2
      type: integer
      description: Indicates the remote git host.
      format: int32
      x-enum-varnames:
      - Unknown
      - GitHub
      - GitLab
    RepositoryCreateRequest:
      type: object
      properties:
        origin:
          type: string
          description: The origin URL to clone.
          format: uri
        recurseSubmodules:
          type: boolean
          description: If submodules should be recursively cloned. Note that further updates are not recursive.
          nullable: true
          deprecated: true
        reference:
          maxLength: 10000
          minLength: 0
          type: string
          description: The branch or tag HEAD points to.
          nullable: true
        committerName:
          maxLength: 10000
          minLength: 0
          type: string
          description: The name of the committer.
          nullable: true
        committerEmail:
          maxLength: 10000
          minLength: 0
          type: string
          description: The e-mail of the committer.
          format: email
          nullable: true
        accessUser:
          maxLength: 10000
          minLength: 0
          type: string
          description: The username to access the git repository with.
          nullable: true
        accessToken:
          maxLength: 10000
          minLength: 0
          type: string
          description: The token/password to access the git repository with.
          nullable: true
        pushTestMergeCommits:
          type: boolean
          description: If commits created from testmerges are pushed to the remote. Requires Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessUser and Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessToken to be set to function.
          nullable: true
        createGitHubDeployments:
          type: boolean
          description: If GitHub deployments should be created. Requires Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessUser, Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessToken, and Tgstation.Server.Api.Models.Internal.RepositorySettings.PushTestMergeCommits to be set to function.
          nullable: true
        showTestMergeCommitters:
          type: boolean
          description: If test merge commits are signed with the username of the person who merged it. Note this only affects future commits.
          nullable: true
        autoUpdatesKeepTestMerges:
          type: boolean
          description: If test merge commits should be kept when auto updating. May cause merge conflicts which will block the update.
          nullable: true
        autoUpdatesSynchronize:
          type: boolean
          description: If synchronization should occur when auto updating. Requries Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessUser and Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessToken to be set to function.
          nullable: true
        postTestMergeComment:
          type: boolean
          description: If test merging should create a comment. Requires Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessToken to be set to function.
          nullable: true
        updateSubmodules:
          type: boolean
          description: Do the equivalent of a `git submodule update --init` alongside any resets to origin, checkouts, or test merge additions. Note that this action is recursive ONLY during cloning.
          nullable: true
      additionalProperties: false
      description: Represents a request to clone the repository.
    RepositoryResponse:
      type: object
      properties:
        origin:
          type: string
          description: The origin URL. If null, the git repository does not currently exist on the server.
          format: uri
          nullable: true
        revisionInformation:
          allOf:
          - $ref: '#/components/schemas/RevisionInformation'
          description: The current Tgstation.Server.Api.Models.RevisionInformation.
          nullable: true
        remoteGitProvider:
          allOf:
          - $ref: '#/components/schemas/RemoteGitProvider'
          nullable: true
        remoteRepositoryOwner:
          type: string
          nullable: true
        remoteRepositoryName:
          type: string
          nullable: true
        activeJob:
          allOf:
          - $ref: '#/components/schemas/JobResponse'
          description: The Tgstation.Server.Api.Models.Response.JobResponse started by the request, if any.
          nullable: true
        reference:
          maxLength: 10000
          minLength: 0
          type: string
          description: The branch or tag HEAD points to.
          nullable: true
        committerName:
          maxLength: 10000
          minLength: 0
          type: string
          description: The name of the committer.
        committerEmail:
          maxLength: 10000
          minLength: 0
          type: string
          description: The e-mail of the committer.
          format: email
        accessUser:
          maxLength: 10000
          minLength: 0
          type: string
          description: The username to access the git repository with.
          nullable: true
        pushTestMergeCommits:
          type: boolean
          description: If commits created from testmerges are pushed to the remote. Requires Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessUser and Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessToken to be set to function.
        createGitHubDeployments:
          type: boolean
          description: If GitHub deployments should be created. Requires Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessUser, Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessToken, and Tgstation.Server.Api.Models.Internal.RepositorySettings.PushTestMergeCommits to be set to function.
        showTestMergeCommitters:
          type: boolean
          description: If test merge commits are signed with the username of the person who merged it. Note this only affects future commits.
        autoUpdatesKeepTestMerges:
          type: boolean
          description: If test merge commits should be kept when auto updating. May cause merge conflicts which will block the update.
        autoUpdatesSynchronize:
          type: boolean
          description: If synchronization should occur when auto updating. Requries Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessUser and Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessToken to be set to function.
        postTestMergeComment:
          type: boolean
          description: If test merging should create a comment. Requires Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessToken to be set to function.
        updateSubmodules:
          type: boolean
          description: Do the equivalent of a `git submodule update --init` alongside any resets to origin, checkouts, or test merge additions. Note that this action is recursive ONLY during cloning.
      additionalProperties: false
      description: Represents a git repository.
    RepositoryRights:
      enum:
      - 0
      - 1
      - 2
      - 4
      - 8
      - 16
      - 32
      - 64
      - 128
      - 256
      - 512
      - 1024
      - 2048
      - 4096
      - 8192
      type: integer
      description: Rights for the git repository.
      format: int64
      x-enum-varnames:
      - None
      - CancelPendingChanges
      - SetOrigin
      - SetSha
      - MergePullRequest
      - UpdateBranch
      - ChangeCommitter
      - ChangeTestMergeCommits
      - ChangeCredentials
      - SetReference
      - Read
      - ChangeAutoUpdateSettings
      - Delete
      - CancelClone
      - ChangeSubmoduleUpdate
    RepositoryUpdateRequest:
      type: object
      properties:
        checkoutSha:
          maxLength: 40
          minLength: 0
          type: string
          description: The commit HEAD should point to.
          nullable: true
        updateFromOrigin:
          type: boolean
          description: Do the equivalent of a `git pull`. Will attempt to merge unless Tgstation.Server.Api.Models.Internal.RepositoryApiBase.Reference is also specified in which case a hard reset will be performed after checking out.
          nullable: true
        newTestMerges:
          type: array
          items:
            $ref: '#/components/schemas/TestMergeParameters'
          description: Tgstation.Server.Api.Models.TestMergeParameters for new Tgstation.Server.Api.Models.TestMerges. Note that merges that conflict will not be performed.
          nullable: true
        reference:
          maxLength: 10000
          minLength: 0
          type: string
          description: The branch or tag HEAD points to.
          nullable: true
        committerName:
          maxLength: 10000
          minLength: 0
          type: string
          description: The name of the committer.
          nullable: true
        committerEmail:
          maxLength: 10000
          minLength: 0
          type: string
          description: The e-mail of the committer.
          format: email
          nullable: true
        accessUser:
          maxLength: 10000
          minLength: 0
          type: string
          description: The username to access the git repository with.
          nullable: true
        accessToken:
          maxLength: 10000
          minLength: 0
          type: string
          description: The token/password to access the git repository with.
          nullable: true
        pushTestMergeCommits:
          type: boolean
          description: If commits created from testmerges are pushed to the remote. Requires Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessUser and Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessToken to be set to function.
          nullable: true
        createGitHubDeployments:
          type: boolean
          description: If GitHub deployments should be created. Requires Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessUser, Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessToken, and Tgstation.Server.Api.Models.Internal.RepositorySettings.PushTestMergeCommits to be set to function.
          nullable: true
        showTestMergeCommitters:
          type: boolean
          description: If test merge commits are signed with the username of the person who merged it. Note this only affects future commits.
          nullable: true
        autoUpdatesKeepTestMerges:
          type: boolean
          description: If test merge commits should be kept when auto updating. May cause merge conflicts which will block the update.
          nullable: true
        autoUpdatesSynchronize:
          type: boolean
          description: If synchronization should occur when auto updating. Requries Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessUser and Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessToken to be set to function.
          nullable: true
        postTestMergeComment:
          type: boolean
          description: If test merging should create a comment. Requires Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessToken to be set to function.
          nullable: true
        updateSubmodules:
          type: boolean
          description: Do the equivalent of a `git submodule update --init` alongside any resets to origin, checkouts, or test merge additions. Note that this action is recursive ONLY during cloning.
          nullable: true
      additionalProperties: false
      description: Represents a request to change the repository.
    RevisionInformation:
      type: object
      properties:
        primaryTestMerge:
          allOf:
          - $ref: '#/components/schemas/TestMerge'
          description: The Tgstation.Server.Api.Models.TestMerge that was created with this Tgstation.Server.Api.Models.RevisionInformation.
          nullable: true
        activeTestMerges:
          type: array
          items:
            $ref: '#/components/schemas/TestMerge'
          description: The Tgstation.Server.Api.Models.TestMerges active in the Tgstation.Server.Api.Models.RevisionInformation.
        compileJobs:
          type: array
          items:
            $ref: '#/components/schemas/EntityId'
          description: The Tgstation.Server.Api.Models.Internal.CompileJobs made from the Tgstation.Server.Api.Models.RevisionInformation.
        commitSha:
          maxLength: 40
          minLength: 0
          type: string
          description: The revision SHA.
        timestamp:
          type: string
          description: The timestamp of the revision.
          format: date-time
        originCommitSha:
          maxLength: 40
          minLength: 0
          type: string
          description: The SHA of the most recent remote commit.
      additionalProperties: false
    RightsType:
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      type: integer
      description: The type of rights a model uses.
      format: int64
      x-enum-varnames:
      - Administration
      - InstanceManager
      - Repository
      - Byond
      - DreamMaker
      - DreamDaemon
      - ChatBots
      - Configuration
      - InstancePermissionSet
    ServerInformationResponse:
      type: object
      properties:
        version:
          type: string
          description: The version of the host.
        apiVersion:
          type: string
          description: The N:Tgstation.Server.Api version of the host.
        dmApiVersion:
          type: string
          description: The DMAPI interop version the server uses.
        windowsHost:
          type: boolean
          description: If the server is running on a windows operating system.
        updateInProgress:
          type: boolean
          description: If there is a server update in progress.
        swarmServers:
          type: array
          items:
            $ref: '#/components/schemas/SwarmServerResponse'
          description: A System.Collections.Generic.ICollection`1 of connected Tgstation.Server.Api.Models.Response.SwarmServerResponses.
          nullable: true
        oAuthProviderInfos:
          type: object
          properties:
            GitHub:
              $ref: '#/components/schemas/OAuthProviderInfo'
            Discord:
              $ref: '#/components/schemas/OAuthProviderInfo'
            TGForums:
              $ref: '#/components/schemas/OAuthProviderInfo'
            Keycloak:
              $ref: '#/components/schemas/OAuthProviderInfo'
            InvisionCommunity:
              $ref: '#/components/schemas/OAuthProviderInfo'
          additionalProperties: false
          description: Map of Tgstation.Server.Api.Models.OAuthProvider to the Tgstation.Server.Api.Models.OAuthProviderInfo for them.
        minimumPasswordLength:
          type: integer
          description: Minimum length of database user passwords.
          format: int32
        instanceLimit:
          type: integer
          description: The maximum number of Tgstation.Server.Api.Models.Instances allowed.
          format: int32
        userLimit:
          type: integer
          description: The maximum number of users allowed.
          format: int32
        userGroupLimit:
          type: integer
          description: The maximum number of user groups allowed.
          format: int32
        validInstancePaths:
          type: array
          items:
            type: string
          description: Limits the locations instances may be created or attached from.
          nullable: true
      additionalProperties: false
      description: Represents basic server information.
    ServerUpdateRequest:
      type: object
      properties:
        newVersion:
          type: string
          description: Changes the version of tgstation-server to the given version from the upstream repository.
      additionalProperties: false
    ServerUpdateResponse:
      type: object
      properties:
        newVersion:
          type: string
          description: Changes the version of tgstation-server to the given version from the upstream repository.
      additionalProperties: false
    ShallowUserResponse:
      type: object
      properties:
        name:
          type: string
        id:
          type: integer
          description: The ID of the entity.
          format: int64
      additionalProperties: false
      description: Base class for user names.
    SwarmServerResponse:
      type: object
      properties:
        controller:
          type: boolean
          description: If the Tgstation.Server.Api.Models.Response.SwarmServerResponse is the controller.
        address:
          type: string
          description: The public address of the server.
          format: uri
        identifier:
          minLength: 1
          type: string
          description: The server's identifier.
      additionalProperties: false
    TestMerge:
      type: object
      properties:
        mergedBy:
          allOf:
          - $ref: '#/components/schemas/ShallowUserResponse'
          description: The Tgstation.Server.Api.Models.NamedEntity of the user who created the Tgstation.Server.Api.Models.TestMerge.
        id:
          type: integer
          description: The ID of the Tgstation.Server.Api.Models.Internal.TestMergeApiBase.
          format: int64
        mergedAt:
          type: string
          description: When the Tgstation.Server.Api.Models.Internal.TestMergeApiBase was created.
          format: date-time
        titleAtMerge:
          minLength: 1
          type: string
          description: The title of the test merge source.
        bodyAtMerge:
          minLength: 1
          type: string
          description: The body of the test merge source.
        url:
          minLength: 1
          type: string
          description: The URL of the test merge source.
        author:
          minLength: 1
          type: string
          description: The author of the test merge source.
        number:
          type: integer
          description: The number of the test merge source.
          format: int32
        targetCommitSha:
          maxLength: 40
          minLength: 0
          type: string
          description: The sha of the test merge revision to merge. If not specified, the latest commit from the source will be used.
        comment:
          maxLength: 10000
          minLength: 0
          type: string
          description: Optional comment about the test.
          nullable: true
      additionalProperties: false
    TestMergeParameters:
      type: object
      properties:
        number:
          type: integer
          description: The number of the test merge source.
          format: int32
        targetCommitSha:
          maxLength: 40
          minLength: 0
          type: string
          description: The sha of the test merge revision to merge. If not specified, the latest commit from the source will be used.
          nullable: true
        comment:
          maxLength: 10000
          minLength: 0
          type: string
          description: Optional comment about the test.
          nullable: true
      additionalProperties: false
      description: Parameters for creating a Tgstation.Server.Api.Models.TestMerge.
    TokenResponse:
      type: object
      properties:
        bearer:
          type: string
          description: The value of the JWT.
        expiresAt:
          type: string
          description: When the Tgstation.Server.Api.Models.Response.TokenResponse expires.
          format: date-time
      additionalProperties: false
      description: Represents a JWT returned by the API.
    UserCreateRequest:
      type: object
      properties:
        password:
          minLength: 1
          type: string
          description: Cleartext password of the user.
          nullable: true
        oAuthConnections:
          type: array
          items:
            $ref: '#/components/schemas/OAuthConnection'
          description: List of Tgstation.Server.Api.Models.OAuthConnections associated with the user.
          nullable: true
        permissionSet:
          allOf:
          - $ref: '#/components/schemas/PermissionSet'
          description: The Tgstation.Server.Api.Models.PermissionSet directly associated with the user.
          nullable: true
        group:
          allOf:
          - $ref: '#/components/schemas/UserGroup'
          description: The Tgstation.Server.Api.Models.Internal.UserGroup asociated with the user, if any.
          nullable: true
        enabled:
          type: boolean
          description: If the Tgstation.Server.Api.Models.Internal.UserModelBase is enabled since users cannot be deleted. System users cannot be disabled.
          nullable: true
        systemIdentifier:
          maxLength: 100
          minLength: 1
          type: string
          description: The SID/UID of the Tgstation.Server.Api.Models.Internal.UserModelBase on Windows/POSIX respectively.
          nullable: true
        name:
          type: string
          nullable: true
      additionalProperties: false
      description: For creating a user.
    UserGroup:
      type: object
      properties:
        id:
          type: integer
          format: int64
        permissionSet:
          allOf:
          - $ref: '#/components/schemas/PermissionSet'
          description: The Tgstation.Server.Api.Models.PermissionSet of the Tgstation.Server.Api.Models.Internal.UserGroup.
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: The name of the entity represented by the Tgstation.Server.Api.Models.NamedEntity.
      additionalProperties: false
      description: Represents a group of users.
    UserGroupCreateRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        permissionSet:
          allOf:
          - $ref: '#/components/schemas/PermissionSet'
          description: The Tgstation.Server.Api.Models.PermissionSet of the Tgstation.Server.Api.Models.Internal.UserGroup.
          nullable: true
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: The name of the entity represented by the Tgstation.Server.Api.Models.NamedEntity.
      additionalProperties: false
      description: Request to create a user group.
    UserGroupResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/ShallowUserResponse'
          description: The Tgstation.Server.Api.Models.UserNames the Tgstation.Server.Api.Models.Response.UserGroupResponse has.
        id:
          type: integer
          format: int64
        permissionSet:
          allOf:
          - $ref: '#/components/schemas/PermissionSet'
          description: The Tgstation.Server.Api.Models.PermissionSet of the Tgstation.Server.Api.Models.Internal.UserGroup.
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: The name of the entity represented by the Tgstation.Server.Api.Models.NamedEntity.
      additionalProperties: false
    UserGroupUpdateRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        permissionSet:
          allOf:
          - $ref: '#/components/schemas/PermissionSet'
          description: The Tgstation.Server.Api.Models.PermissionSet of the Tgstation.Server.Api.Models.Internal.UserGroup.
          nullable: true
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: The name of the entity represented by the Tgstation.Server.Api.Models.NamedEntity.
          nullable: true
      additionalProperties: false
      description: Request to update a user group.
    UserResponse:
      type: object
      properties:
        createdBy:
          allOf:
          - $ref: '#/components/schemas/ShallowUserResponse'
          description: The Tgstation.Server.Api.Models.Response.UserResponse who created this Tgstation.Server.Api.Models.Response.UserResponse.
        oAuthConnections:
          type: array
          items:
            $ref: '#/components/schemas/OAuthConnection'
          description: List of Tgstation.Server.Api.Models.OAuthConnections associated with the user.
        permissionSet:
          allOf:
          - $ref: '#/components/schemas/PermissionSet'
          description: The Tgstation.Server.Api.Models.PermissionSet directly associated with the user.
          nullable: true
        group:
          allOf:
          - $ref: '#/components/schemas/UserGroup'
          description: The Tgstation.Server.Api.Models.Internal.UserGroup asociated with the user, if any.
          nullable: true
        enabled:
          type: boolean
          description: If the Tgstation.Server.Api.Models.Internal.UserModelBase is enabled since users cannot be deleted. System users cannot be disabled.
        createdAt:
          type: string
          description: When the Tgstation.Server.Api.Models.Internal.UserModelBase was created.
          format: date-time
          readOnly: true
        systemIdentifier:
          maxLength: 100
          minLength: 1
          type: string
          description: The SID/UID of the Tgstation.Server.Api.Models.Internal.UserModelBase on Windows/POSIX respectively.
          nullable: true
        name:
          type: string
        id:
          type: integer
          description: The ID of the entity.
          format: int64
      additionalProperties: false
    UserUpdateRequest:
      type: object
      properties:
        password:
          minLength: 1
          type: string
          description: Cleartext password of the user.
          nullable: true
        oAuthConnections:
          type: array
          items:
            $ref: '#/components/schemas/OAuthConnection'
          description: List of Tgstation.Server.Api.Models.OAuthConnections associated with the user.
          nullable: true
        permissionSet:
          allOf:
          - $ref: '#/components/schemas/PermissionSet'
          description: The Tgstation.Server.Api.Models.PermissionSet directly associated with the user.
          nullable: true
        group:
          allOf:
          - $ref: '#/components/schemas/UserGroup'
          description: The Tgstation.Server.Api.Models.Internal.UserGroup asociated with the user, if any.
          nullable: true
        enabled:
          type: boolean
          description: If the Tgstation.Server.Api.Models.Internal.UserModelBase is enabled since users cannot be deleted. System users cannot be disabled.
          nullable: true
        systemIdentifier:
          maxLength: 100
          minLength: 1
          type: string
          description: The SID/UID of the Tgstation.Server.Api.Models.Internal.UserModelBase on Windows/POSIX respectively.
          nullable: true
        name:
          type: string
          nullable: true
        id:
          type: integer
          description: The ID of the entity.
          format: int64
      additionalProperties: false
      description: For editing a given user.
    WatchdogStatus:
      enum:
      - 0
      - 1
      - 2
      - 3
      type: integer
      description: The current status of the watchdog.
      format: int32
      x-enum-varnames:
      - Offline
      - Restoring
      - Online
      - DelayedRestart
  responses:
    400:
      description: A badly formatted request was made. See error message for details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessageResponse'
    401:
      description: Invalid Authentication header.
    403:
      description: User lacks sufficient permissions for the operation.
    409:
      description: A data integrity check failed while performing the operation. See error message for details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessageResponse'
    406:
      description: 'Invalid Accept header, TGS requires `Accept: application/json`.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessageResponse'
    500:
      description: An internal server error occurred!
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessageResponse'
    503:
      description: The server may be starting up or shutting down.
    501:
      description: This operation requires POSIX system identities to be implemented. See https://github.com/tgstation/tgstation-server/issues/709 for details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessageResponse'
  parameters:
    Instance:
      name: Instance
      in: header
      description: The instance ID being accessed
      required: true
      style: simple
      schema:
        type: integer
    Api:
      name: Api
      in: header
      description: The API version being used in the form "Tgstation.Server.Api/[API version]"
      required: true
      style: simple
      schema:
        type: string
        format: productheader
      example: Tgstation.Server.Api/9.10.2
    User-Agent:
      name: User-Agent
      in: header
      description: The user agent of the calling client.
      required: true
      style: simple
      schema:
        type: string
        format: productheader
      example: Your-user-agent/1.0.0.0
  securitySchemes:
    Password_Login_Scheme:
      type: http
      scheme: Basic
    OAuth_Login_Scheme:
      type: http
      scheme: OAuth
    Token_Authorization_Scheme:
      type: http
      scheme: Bearer
      bearerFormat: JWT
externalDocs:
  description: API Usage Documentation
  url: https://tgstation.github.io/tgstation-server/api.html
