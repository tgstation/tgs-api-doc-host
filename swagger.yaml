openapi: 3.0.1
info:
  title: TGS API
  description: A production scale tool for BYOND server management
  contact:
    name: /tg/station 13
    url: https://github.com/tgstation
  license:
    name: AGPL-3.0
    url: https://github.com/tgstation/tgstation-server/blob/dev/LICENSE
  version: 8.0.0
paths:
  /Administration:
    get:
      tags:
      - Administration
      summary: Get Tgstation.Server.Api.Models.Administration server information.
      operationId: AdministrationController.Read
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      responses:
        200:
          description: Retrieved Tgstation.Server.Api.Models.Administration data successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Administration'
        424:
          description: The GitHub API rate limit was hit. See response header Retry-After.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        429:
          description: A GitHub API error occurred. See error message for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    post:
      tags:
      - Administration
      summary: Attempt to perform a server upgrade.
      operationId: AdministrationController.Update
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      requestBody:
        description: The model containing the Tgstation.Server.Api.Models.Administration.NewVersion to update to.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Administration'
              description: Represents administrative server information
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Administration'
              description: Represents administrative server information
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Administration'
              description: Represents administrative server information
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Administration'
              description: Represents administrative server information
      responses:
        202:
          description: Update has been started successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Administration'
        410:
          description: The requested release version could not be found in the target GitHub repository.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        422:
          description: Upgrade operations are unavailable due to the launch configuration of TGS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        424:
          description: A GitHub rate limit was encountered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        429:
          description: A GitHub API error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    delete:
      tags:
      - Administration
      summary: Attempts to restart the server.
      operationId: AdministrationController.Delete
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      responses:
        204:
          description: Restart begun successfully.
        422:
          description: Restart operations are unavailable due to the launch configuration of TGS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Administration/Logs:
    get:
      tags:
      - Administration
      summary: List Tgstation.Server.Api.Models.LogFiles present.
      operationId: AdministrationController.ListLogs
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: page
        in: query
        description: The current page.
        schema:
          type: integer
          description: The current page.
          format: int32
          nullable: true
      - name: pageSize
        in: query
        description: The page size.
        schema:
          type: integer
          description: The page size.
          format: int32
          nullable: true
      responses:
        200:
          description: Listed logs successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLogFile'
        409:
          description: An IO error occurred while listing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Administration/Logs/{path}:
    get:
      tags:
      - Administration
      summary: Download a Tgstation.Server.Api.Models.LogFile.
      operationId: AdministrationController.GetLog
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: path
        in: path
        description: The path to download.
        required: true
        schema:
          type: string
          description: The path to download.
          nullable: true
      responses:
        200:
          description: Downloaded Tgstation.Server.Api.Models.LogFile successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogFile'
        409:
          description: An IO error occurred while downloading.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Byond:
    get:
      tags:
      - Byond
      summary: Gets the active Tgstation.Server.Api.Models.Byond version.
      operationId: ByondController.Read
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      responses:
        200:
          description: Retrieved version information successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Byond'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    post:
      tags:
      - Byond
      summary: Changes the active BYOND version to the one specified in a given model.
      operationId: ByondController.Update
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: The Tgstation.Server.Api.Models.Byond.Version to switch to.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Byond'
              description: Represents a BYOND installation. Tgstation.Server.Api.Models.FileTicketResult.FileTicket is used to upload custom BYOND version zip files, though Tgstation.Server.Api.Models.Byond.Version must still be set.
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Byond'
              description: Represents a BYOND installation. Tgstation.Server.Api.Models.FileTicketResult.FileTicket is used to upload custom BYOND version zip files, though Tgstation.Server.Api.Models.Byond.Version must still be set.
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Byond'
              description: Represents a BYOND installation. Tgstation.Server.Api.Models.FileTicketResult.FileTicket is used to upload custom BYOND version zip files, though Tgstation.Server.Api.Models.Byond.Version must still be set.
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Byond'
              description: Represents a BYOND installation. Tgstation.Server.Api.Models.FileTicketResult.FileTicket is used to upload custom BYOND version zip files, though Tgstation.Server.Api.Models.Byond.Version must still be set.
      responses:
        200:
          description: Switched active version successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Byond'
        202:
          description: Created Tgstation.Server.Api.Models.Job to install and switch active version successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Byond'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Byond/List:
    get:
      tags:
      - Byond
      summary: Lists installed Tgstation.Server.Api.Models.Byond versions.
      operationId: ByondController.List
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: page
        in: query
        description: The current page.
        schema:
          type: integer
          description: The current page.
          format: int32
          nullable: true
      - name: pageSize
        in: query
        description: The page size.
        schema:
          type: integer
          description: The page size.
          format: int32
          nullable: true
      responses:
        200:
          description: Retrieved version information successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedByond'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Chat:
    put:
      tags:
      - Chat
      summary: Create a new chat bot model.
      operationId: ChatController.Create
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: The Tgstation.Server.Api.Models.ChatBot to create.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ChatBot'
              description: The Tgstation.Server.Api.Models.ChatBot to create.
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ChatBot'
              description: The Tgstation.Server.Api.Models.ChatBot to create.
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ChatBot'
              description: The Tgstation.Server.Api.Models.ChatBot to create.
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ChatBot'
              description: The Tgstation.Server.Api.Models.ChatBot to create.
      responses:
        201:
          description: Created chat bot successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatBot'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    post:
      tags:
      - Chat
      summary: Updates a chat bot model.
      operationId: ChatController.Update
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: The Tgstation.Server.Api.Models.ChatBot update to apply.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ChatBot'
              description: The Tgstation.Server.Api.Models.ChatBot update to apply.
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ChatBot'
              description: The Tgstation.Server.Api.Models.ChatBot update to apply.
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ChatBot'
              description: The Tgstation.Server.Api.Models.ChatBot update to apply.
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ChatBot'
              description: The Tgstation.Server.Api.Models.ChatBot update to apply.
      responses:
        200:
          description: Update applied successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatBot'
        204:
          description: Update applied successfully. Tgstation.Server.Api.Models.ChatBot not returned based on user permissions.
        410:
          description: The Tgstation.Server.Api.Models.ChatBot with the given ID does not exist in this instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Chat/{id}:
    delete:
      tags:
      - Chat
      summary: Delete a Tgstation.Server.Api.Models.ChatBot.
      operationId: ChatController.Delete
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: id
        in: path
        description: The Tgstation.Server.Api.Models.Internal.ChatBot.Id to delete.
        required: true
        schema:
          type: integer
          description: The Tgstation.Server.Api.Models.Internal.ChatBot.Id to delete.
          format: int64
      responses:
        204:
          description: Chat bot deleted or does not exist.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    get:
      tags:
      - Chat
      summary: Get a specific Tgstation.Server.Api.Models.ChatBot.
      operationId: ChatController.GetId
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: id
        in: path
        description: The Tgstation.Server.Api.Models.Internal.ChatBot.Id to retrieve.
        required: true
        schema:
          type: integer
          description: The Tgstation.Server.Api.Models.Internal.ChatBot.Id to retrieve.
          format: int64
      responses:
        200:
          description: Retrieved Tgstation.Server.Api.Models.ChatBot successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatBot'
        410:
          description: The Tgstation.Server.Api.Models.ChatBot with the given ID does not exist in this instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Chat/List:
    get:
      tags:
      - Chat
      summary: List Tgstation.Server.Api.Models.ChatBots.
      operationId: ChatController.List
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: page
        in: query
        description: The current page.
        schema:
          type: integer
          description: The current page.
          format: int32
          nullable: true
      - name: pageSize
        in: query
        description: The page size.
        schema:
          type: integer
          description: The page size.
          format: int32
          nullable: true
      responses:
        200:
          description: Listed chat bots successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedChatBot'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Config:
    post:
      tags:
      - Configuration
      summary: Write to a configuration file.
      operationId: ConfigurationController.Update
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: The Tgstation.Server.Api.Models.ConfigurationFile representing the file.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigurationFile'
              description: Represents a game configuration file. Create and delete actions uncerimonuously overwrite/delete files
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigurationFile'
              description: Represents a game configuration file. Create and delete actions uncerimonuously overwrite/delete files
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigurationFile'
              description: Represents a game configuration file. Create and delete actions uncerimonuously overwrite/delete files
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigurationFile'
              description: Represents a game configuration file. Create and delete actions uncerimonuously overwrite/delete files
      responses:
        200:
          description: File updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationFile'
        202:
          description: File upload ticket created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationFile'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    put:
      tags:
      - Configuration
      summary: Create a configuration directory.
      operationId: ConfigurationController.Create
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: The Tgstation.Server.Api.Models.ConfigurationFile representing the directory.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigurationFile'
              description: Represents a game configuration file. Create and delete actions uncerimonuously overwrite/delete files
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigurationFile'
              description: Represents a game configuration file. Create and delete actions uncerimonuously overwrite/delete files
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigurationFile'
              description: Represents a game configuration file. Create and delete actions uncerimonuously overwrite/delete files
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigurationFile'
              description: Represents a game configuration file. Create and delete actions uncerimonuously overwrite/delete files
      responses:
        200:
          description: Directory already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationFile'
        201:
          description: Directory created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationFile'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    delete:
      tags:
      - Configuration
      summary: Deletes an empty directory
      operationId: ConfigurationController.Delete
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: A Tgstation.Server.Api.Models.ConfigurationFile representing the path to the directory to delete
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigurationFile'
              description: Represents a game configuration file. Create and delete actions uncerimonuously overwrite/delete files
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigurationFile'
              description: Represents a game configuration file. Create and delete actions uncerimonuously overwrite/delete files
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigurationFile'
              description: Represents a game configuration file. Create and delete actions uncerimonuously overwrite/delete files
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ConfigurationFile'
              description: Represents a game configuration file. Create and delete actions uncerimonuously overwrite/delete files
      responses:
        204:
          description: Empty directory deleted successfully.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Config/File/{filePath}:
    get:
      tags:
      - Configuration
      summary: Get the contents of a file at a filePath
      operationId: ConfigurationController.File
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: filePath
        in: path
        description: The path of the file to get
        required: true
        schema:
          type: string
          description: The path of the file to get
          nullable: true
      responses:
        200:
          description: File read successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationFile'
        410:
          description: File does not currently exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Config/List/{directoryPath}:
    get:
      tags:
      - Configuration
      summary: Get the contents of a directory at a directoryPath
      operationId: ConfigurationController.Directory
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: directoryPath
        in: path
        description: The path of the directory to get
        required: true
        schema:
          type: string
          description: The path of the directory to get
          nullable: true
      - name: page
        in: query
        description: The current page.
        schema:
          type: integer
          description: The current page.
          format: int32
          nullable: true
      - name: pageSize
        in: query
        description: The page size.
        schema:
          type: integer
          description: The page size.
          format: int32
          nullable: true
      responses:
        200:
          description: Directory listed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedConfigurationFile'
        410:
          description: Directory does not currently exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Config/List:
    get:
      tags:
      - Configuration
      summary: Get the contents of the root configuration directory.
      operationId: ConfigurationController.List
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: page
        in: query
        description: The current page.
        schema:
          type: integer
          description: The current page.
          format: int32
          nullable: true
      - name: pageSize
        in: query
        description: The page size.
        schema:
          type: integer
          description: The page size.
          format: int32
          nullable: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedConfigurationFile'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /DreamDaemon:
    put:
      tags:
      - DreamDaemon
      summary: Launches the watchdog.
      operationId: DreamDaemonController.Create
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      responses:
        202:
          description: Tgstation.Server.Api.Models.Job to launch the watchdog started successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    get:
      tags:
      - DreamDaemon
      summary: Get the watchdog status.
      operationId: DreamDaemonController.Read
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      responses:
        200:
          description: Read Tgstation.Server.Api.Models.DreamDaemon information successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DreamDaemon'
        410:
          description: The database entity for the requested instance could not be retrieved. The instance was likely detached.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    delete:
      tags:
      - DreamDaemon
      summary: Stops the Watchdog if it's running.
      operationId: DreamDaemonController.Delete
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      responses:
        204:
          description: Watchdog terminated.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    post:
      tags:
      - DreamDaemon
      summary: Update watchdog settings to be applied at next server reboot.
      operationId: DreamDaemonController.Update
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: The updated Tgstation.Server.Api.Models.DreamDaemon settings.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/DreamDaemon'
              description: Represents an instance of BYOND's DreamDaemon game server. Create action starts the server. Delete action shuts down the server
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/DreamDaemon'
              description: Represents an instance of BYOND's DreamDaemon game server. Create action starts the server. Delete action shuts down the server
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/DreamDaemon'
              description: Represents an instance of BYOND's DreamDaemon game server. Create action starts the server. Delete action shuts down the server
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/DreamDaemon'
              description: Represents an instance of BYOND's DreamDaemon game server. Create action starts the server. Delete action shuts down the server
      responses:
        200:
          description: Settings applied successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DreamDaemon'
        410:
          description: The database entity for the requested instance could not be retrieved. The instance was likely detached.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    patch:
      tags:
      - DreamDaemon
      summary: Creates a Tgstation.Server.Api.Models.Job to restart the Watchdog. It will not start if it wasn't already running.
      operationId: DreamDaemonController.Restart
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      responses:
        202:
          description: Restart Tgstation.Server.Api.Models.Job started successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /DreamDaemon/Diagnostics:
    patch:
      tags:
      - DreamDaemon
      summary: Creates a Tgstation.Server.Api.Models.Job to generate a DreamDaemon process dump.
      operationId: DreamDaemonController.CreateDump
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      responses:
        202:
          description: Dump Tgstation.Server.Api.Models.Job started successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /DreamMaker:
    get:
      tags:
      - DreamMaker
      summary: Read current Tgstation.Server.Api.Models.DreamMaker status.
      operationId: DreamMakerController.Read
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      responses:
        200:
          description: Read Tgstation.Server.Api.Models.DreamMaker status successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DreamMaker'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    put:
      tags:
      - DreamMaker
      summary: Begin deploying repository code.
      operationId: DreamMakerController.Create
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      responses:
        202:
          description: Created deployment Tgstation.Server.Api.Models.Job successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    post:
      tags:
      - DreamMaker
      summary: Update deployment settings.
      operationId: DreamMakerController.Update
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: The updated Tgstation.Server.Api.Models.DreamMaker settings.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/DreamMaker'
              description: Represents the state of the DreamMaker compiler. Create action starts a new compile. Delete action cancels the current compile
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/DreamMaker'
              description: Represents the state of the DreamMaker compiler. Create action starts a new compile. Delete action cancels the current compile
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/DreamMaker'
              description: Represents the state of the DreamMaker compiler. Create action starts a new compile. Delete action cancels the current compile
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/DreamMaker'
              description: Represents the state of the DreamMaker compiler. Create action starts a new compile. Delete action cancels the current compile
      responses:
        200:
          description: Changes applied successfully. The updated Tgstation.Server.Api.Models.DreamMaker settings will be returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DreamMaker'
        204:
          description: Changes applied successfully. The updated Tgstation.Server.Api.Models.DreamMaker settings will be not be returned due to permissions.
        410:
          description: The database entity for the requested instance could not be retrieved. The instance was likely detached.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /DreamMaker/{id}:
    get:
      tags:
      - DreamMaker
      summary: Get a Tgstation.Server.Api.Models.CompileJob specified by a given id.
      operationId: DreamMakerController.GetId
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: id
        in: path
        description: The Tgstation.Server.Api.Models.EntityId.Id.
        required: true
        schema:
          type: integer
          description: The Tgstation.Server.Api.Models.EntityId.Id.
          format: int64
      responses:
        200:
          description: Tgstation.Server.Api.Models.CompileJob retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompileJob'
        404:
          description: Specified Tgstation.Server.Api.Models.CompileJob ID does not exist in this instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /DreamMaker/List:
    get:
      tags:
      - DreamMaker
      summary: List all Tgstation.Server.Api.Models.CompileJobTgstation.Server.Api.Models.EntityIds for the instance.
      operationId: DreamMakerController.List
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: page
        in: query
        description: The current page.
        schema:
          type: integer
          description: The current page.
          format: int32
          nullable: true
      - name: pageSize
        in: query
        description: The page size.
        schema:
          type: integer
          description: The page size.
          format: int32
          nullable: true
      responses:
        200:
          description: Retrieved Tgstation.Server.Api.Models.EntityIds successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCompileJob'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /:
    get:
      tags:
      - Home
      summary: Main page of the Tgstation.Server.Host.Core.Application
      operationId: HomeController.Home
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      responses:
        200:
          description: Tgstation.Server.Api.Models.ServerInformation retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInformation'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
    post:
      tags:
      - Home
      summary: Attempt to authenticate a Tgstation.Server.Host.Models.User using Tgstation.Server.Host.Controllers.ApiController.ApiHeaders
      operationId: HomeController.CreateToken
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: OAuthProvider
        in: header
        description: The external OAuth service provider.
        style: simple
        schema:
          type: string
        example: Discord
      responses:
        200:
          description: User logged in and Tgstation.Server.Api.Models.Token generated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        429:
          description: OAuth authentication failed due to rate limiting.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        401:
          description: User authentication failed.
        403:
          description: User authenticated but is disabled by an administrator.
        400:
          $ref: '#/components/responses/400'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Password_Login_Scheme: []
        OAuth_Login_Scheme: []
  /Instance:
    put:
      tags:
      - Instance
      summary: Create or attach an Tgstation.Server.Api.Models.Instance.
      operationId: InstanceController.Create
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      requestBody:
        description: The Tgstation.Server.Api.Models.Instance settings.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Instance'
              description: Metadata about a server instance
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Instance'
              description: Metadata about a server instance
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Instance'
              description: Metadata about a server instance
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Instance'
              description: Metadata about a server instance
      responses:
        200:
          description: Instance attached successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
        201:
          description: Instance created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    post:
      tags:
      - Instance
      summary: Modify an Tgstation.Server.Api.Models.Instance's settings.
      operationId: InstanceController.Update
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      requestBody:
        description: The updated Tgstation.Server.Api.Models.Instance settings.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Instance'
              description: Metadata about a server instance
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Instance'
              description: Metadata about a server instance
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Instance'
              description: Metadata about a server instance
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Instance'
              description: Metadata about a server instance
      responses:
        200:
          description: Instance updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
        202:
          description: Instance updated successfully and relocation job created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
        410:
          description: The database entity for the requested instance could not be retrieved. The instance was likely detached.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Instance/{id}:
    delete:
      tags:
      - Instance
      summary: Detach an Tgstation.Server.Api.Models.Instance with the given id.
      operationId: InstanceController.Delete
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: id
        in: path
        description: The Tgstation.Server.Api.Models.EntityId.Id of the instance to detach.
        required: true
        schema:
          type: integer
          description: The Tgstation.Server.Api.Models.EntityId.Id of the instance to detach.
          format: int64
      responses:
        204:
          description: Instance detatched successfully.
        410:
          description: The database entity for the requested instance could not be retrieved. The instance was likely detached.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    get:
      tags:
      - Instance
      summary: Get a specific Tgstation.Server.Api.Models.Instance.
      operationId: InstanceController.GetId
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: id
        in: path
        description: The instance Tgstation.Server.Api.Models.EntityId.Id to retrieve.
        required: true
        schema:
          type: integer
          description: The instance Tgstation.Server.Api.Models.EntityId.Id to retrieve.
          format: int64
      responses:
        200:
          description: Retrieved Tgstation.Server.Api.Models.Instance successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
        410:
          description: The database entity for the requested instance could not be retrieved. The instance was likely detached.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    patch:
      tags:
      - Instance
      summary: Gives the current user full permissions on a given instance id.
      operationId: InstanceController.GrantPermissions
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: id
        in: path
        description: The instance Tgstation.Server.Api.Models.EntityId.Id to give permissions on.
        required: true
        schema:
          type: integer
          description: The instance Tgstation.Server.Api.Models.EntityId.Id to give permissions on.
          format: int64
      responses:
        204:
          description: Granted permissions successfully.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Instance/List:
    get:
      tags:
      - Instance
      summary: List Tgstation.Server.Api.Models.Instances.
      operationId: InstanceController.List
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: page
        in: query
        description: The current page.
        schema:
          type: integer
          description: The current page.
          format: int32
          nullable: true
      - name: pageSize
        in: query
        description: The page size.
        schema:
          type: integer
          description: The page size.
          format: int32
          nullable: true
      responses:
        200:
          description: Retrieved Tgstation.Server.Api.Models.Instances successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedInstance'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /InstancePermissionSet:
    put:
      tags:
      - InstancePermissionSet
      summary: Create an Tgstation.Server.Api.Models.InstancePermissionSet.
      operationId: InstancePermissionSetController.Create
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: The Tgstation.Server.Api.Models.InstancePermissionSet to create.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/InstancePermissionSet'
              description: Represents a Tgstation.Server.Api.Models.PermissionSets permissions in an Tgstation.Server.Api.Models.Instance
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/InstancePermissionSet'
              description: Represents a Tgstation.Server.Api.Models.PermissionSets permissions in an Tgstation.Server.Api.Models.Instance
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/InstancePermissionSet'
              description: Represents a Tgstation.Server.Api.Models.PermissionSets permissions in an Tgstation.Server.Api.Models.Instance
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/InstancePermissionSet'
              description: Represents a Tgstation.Server.Api.Models.PermissionSets permissions in an Tgstation.Server.Api.Models.Instance
      responses:
        201:
          description: Tgstation.Server.Api.Models.InstancePermissionSet created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstancePermissionSet'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    post:
      tags:
      - InstancePermissionSet
      summary: Update the permissions for an Tgstation.Server.Api.Models.InstancePermissionSet.
      operationId: InstancePermissionSetController.Update
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: The updated Tgstation.Server.Api.Models.InstancePermissionSet.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/InstancePermissionSet'
              description: Represents a Tgstation.Server.Api.Models.PermissionSets permissions in an Tgstation.Server.Api.Models.Instance
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/InstancePermissionSet'
              description: Represents a Tgstation.Server.Api.Models.PermissionSets permissions in an Tgstation.Server.Api.Models.Instance
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/InstancePermissionSet'
              description: Represents a Tgstation.Server.Api.Models.PermissionSets permissions in an Tgstation.Server.Api.Models.Instance
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/InstancePermissionSet'
              description: Represents a Tgstation.Server.Api.Models.PermissionSets permissions in an Tgstation.Server.Api.Models.Instance
      responses:
        200:
          description: Tgstation.Server.Api.Models.InstancePermissionSet updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstancePermissionSet'
        410:
          description: The requested Tgstation.Server.Api.Models.InstancePermissionSet does not currently exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    get:
      tags:
      - InstancePermissionSet
      summary: Read the active Tgstation.Server.Api.Models.InstancePermissionSet.
      operationId: InstancePermissionSetController.Read
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      responses:
        200:
          description: Tgstation.Server.Api.Models.InstancePermissionSet retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstancePermissionSet'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /InstancePermissionSet/List:
    get:
      tags:
      - InstancePermissionSet
      summary: Lists Tgstation.Server.Api.Models.InstancePermissionSets for the instance.
      operationId: InstancePermissionSetController.List
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: page
        in: query
        description: The current page.
        schema:
          type: integer
          description: The current page.
          format: int32
          nullable: true
      - name: pageSize
        in: query
        description: The page size.
        schema:
          type: integer
          description: The page size.
          format: int32
          nullable: true
      responses:
        200:
          description: Retrieved Tgstation.Server.Api.Models.InstancePermissionSets successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedInstancePermissionSet'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /InstancePermissionSet/{id}:
    get:
      tags:
      - InstancePermissionSet
      summary: Gets a specific Tgstation.Server.Api.Models.InstancePermissionSet.
      operationId: InstancePermissionSetController.GetId
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: id
        in: path
        description: The Tgstation.Server.Api.Models.InstancePermissionSet.PermissionSetId.
        required: true
        schema:
          type: integer
          description: The Tgstation.Server.Api.Models.InstancePermissionSet.PermissionSetId.
          format: int64
      responses:
        200:
          description: Retrieve Tgstation.Server.Api.Models.InstancePermissionSet successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstancePermissionSet'
        410:
          description: The requested Tgstation.Server.Api.Models.InstancePermissionSet does not currently exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    delete:
      tags:
      - InstancePermissionSet
      summary: Delete an Tgstation.Server.Api.Models.InstancePermissionSet.
      operationId: InstancePermissionSetController.Delete
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: id
        in: path
        description: The Tgstation.Server.Api.Models.InstancePermissionSet.PermissionSetId to delete.
        required: true
        schema:
          type: integer
          description: The Tgstation.Server.Api.Models.InstancePermissionSet.PermissionSetId to delete.
          format: int64
      responses:
        204:
          description: Target Tgstation.Server.Api.Models.InstancePermissionSet deleted.
        410:
          description: Target Tgstation.Server.Api.Models.InstancePermissionSet or no longer exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Job:
    get:
      tags:
      - Job
      summary: Get active Tgstation.Server.Api.Models.Jobs for the instance.
      operationId: JobController.Read
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: page
        in: query
        description: The current page.
        schema:
          type: integer
          description: The current page.
          format: int32
          nullable: true
      - name: pageSize
        in: query
        description: The page size.
        schema:
          type: integer
          description: The page size.
          format: int32
          nullable: true
      responses:
        200:
          description: Retrieved active Tgstation.Server.Api.Models.Jobs successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedJob'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Job/List:
    get:
      tags:
      - Job
      summary: List all Tgstation.Server.Api.Models.JobTgstation.Server.Api.Models.EntityIds for the instance in reverse creation order.
      operationId: JobController.List
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: page
        in: query
        description: The current page.
        schema:
          type: integer
          description: The current page.
          format: int32
          nullable: true
      - name: pageSize
        in: query
        description: The page size.
        schema:
          type: integer
          description: The page size.
          format: int32
          nullable: true
      responses:
        200:
          description: Retrieved Tgstation.Server.Api.Models.JobTgstation.Server.Api.Models.EntityIds successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedJob'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Job/{id}:
    delete:
      tags:
      - Job
      summary: Cancel a running Tgstation.Server.Api.Models.Job.
      operationId: JobController.Delete
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: id
        in: path
        description: The Tgstation.Server.Api.Models.EntityId.Id of the Tgstation.Server.Api.Models.Job to cancel.
        required: true
        schema:
          type: integer
          description: The Tgstation.Server.Api.Models.EntityId.Id of the Tgstation.Server.Api.Models.Job to cancel.
          format: int64
      responses:
        202:
          description: Tgstation.Server.Api.Models.Job cancellation requested successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        404:
          description: Tgstation.Server.Api.Models.Job does not exist in this instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        410:
          description: Tgstation.Server.Api.Models.Job could not be found in the job manager. Has it already completed?
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    get:
      tags:
      - Job
      summary: Get a specific Tgstation.Server.Api.Models.Job.
      operationId: JobController.GetId
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      - name: id
        in: path
        description: The Tgstation.Server.Api.Models.EntityId.Id of the Tgstation.Server.Api.Models.Job to retrieve.
        required: true
        schema:
          type: integer
          description: The Tgstation.Server.Api.Models.EntityId.Id of the Tgstation.Server.Api.Models.Job to retrieve.
          format: int64
      responses:
        200:
          description: Retrieved Tgstation.Server.Api.Models.Job successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        404:
          description: Tgstation.Server.Api.Models.Job does not exist in this instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Repository:
    put:
      tags:
      - Repository
      summary: Begin cloning the repository if it doesn't exist.
      operationId: RepositoryController.Create
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: Initial Tgstation.Server.Api.Models.Repository settings.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Repository'
              description: Represents a git repository
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Repository'
              description: Represents a git repository
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Repository'
              description: Represents a git repository
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Repository'
              description: Represents a git repository
      responses:
        201:
          description: The Tgstation.Server.Api.Models.Repository was created successfully and the Tgstation.Server.Api.Models.Job to clone it has begun.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        410:
          description: The database entity for the requested instance could not be retrieved. The instance was likely detached.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    delete:
      tags:
      - Repository
      summary: Delete the Tgstation.Server.Api.Models.Repository.
      operationId: RepositoryController.Delete
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      responses:
        202:
          description: Job to delete the repository created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        410:
          description: The database entity for the requested instance could not be retrieved. The instance was likely detached.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    get:
      tags:
      - Repository
      summary: Get Tgstation.Server.Api.Models.Repository status.
      operationId: RepositoryController.Read
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      responses:
        200:
          description: Retrieved the Tgstation.Server.Api.Models.Repository settings successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        201:
          description: Retrieved the Tgstation.Server.Api.Models.Repository settings successfully, though they did not previously exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        410:
          description: The database entity for the requested instance could not be retrieved. The instance was likely detached.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    post:
      tags:
      - Repository
      summary: Perform updats to the Tgstation.Server.Api.Models.Repository.
      operationId: RepositoryController.Update
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - $ref: '#/components/parameters/Instance'
      requestBody:
        description: The updated Tgstation.Server.Api.Models.Repository.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Repository'
              description: Represents a git repository
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Repository'
              description: Represents a git repository
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Repository'
              description: Represents a git repository
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/Repository'
              description: Represents a git repository
      responses:
        200:
          description: Updated the Tgstation.Server.Api.Models.Repository settings successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        202:
          description: Updated the Tgstation.Server.Api.Models.Repository settings successfully and a Tgstation.Server.Api.Models.Job was created to make the requested git changes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        410:
          description: The database entity for the requested instance could not be retrieved. The instance was likely detached.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /Transfer:
    get:
      tags:
      - Transfer
      summary: Downloads a file with a given ticket.
      operationId: TransferController.Download
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: ticket
        in: query
        description: The Tgstation.Server.Api.Models.FileTicketResult.FileTicket for the download.
        required: true
        schema:
          type: string
          description: The Tgstation.Server.Api.Models.FileTicketResult.FileTicket for the download.
      responses:
        200:
          description: Started streaming download successfully.
          content:
            application/octet-stream:
              schema:
                type: string
                description: Very similar to Microsoft.AspNetCore.Mvc.FileStreamResult except it's Microsoft.AspNetCore.Mvc.Infrastructure.IActionResultExecutor`1 contains a fix for https://github.com/dotnet/aspnetcore/issues/28189.
                format: binary
        410:
          description: The ticket was no longer or was never valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    put:
      tags:
      - Transfer
      summary: Uploads a file with a given ticket.
      operationId: TransferController.Upload
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: ticket
        in: query
        description: The Tgstation.Server.Api.Models.FileTicketResult.FileTicket for the upload.
        required: true
        schema:
          type: string
          description: The Tgstation.Server.Api.Models.FileTicketResult.FileTicket for the upload.
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        204:
          description: Uploaded file successfully.
        410:
          description: The ticket was no longer or was never valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        409:
          description: An error occurred during the upload.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /User:
    put:
      tags:
      - User
      summary: Create a new Tgstation.Server.Api.Models.User.
      operationId: UserController.Create
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      requestBody:
        description: The Tgstation.Server.Api.Models.User to create.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserUpdate'
              description: For editing a given Tgstation.Server.Api.Models.User. Will never be returned by the API
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserUpdate'
              description: For editing a given Tgstation.Server.Api.Models.User. Will never be returned by the API
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserUpdate'
              description: For editing a given Tgstation.Server.Api.Models.User. Will never be returned by the API
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserUpdate'
              description: For editing a given Tgstation.Server.Api.Models.User. Will never be returned by the API
      responses:
        201:
          description: Tgstation.Server.Api.Models.User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        410:
          description: The requested system identifier could not be found.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    post:
      tags:
      - User
      summary: Update a Tgstation.Server.Api.Models.User.
      operationId: UserController.Update
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      requestBody:
        description: The Tgstation.Server.Api.Models.User to update.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserUpdate'
              description: For editing a given Tgstation.Server.Api.Models.User. Will never be returned by the API
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserUpdate'
              description: For editing a given Tgstation.Server.Api.Models.User. Will never be returned by the API
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserUpdate'
              description: For editing a given Tgstation.Server.Api.Models.User. Will never be returned by the API
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserUpdate'
              description: For editing a given Tgstation.Server.Api.Models.User. Will never be returned by the API
      responses:
        200:
          description: Tgstation.Server.Api.Models.User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: Requested Tgstation.Server.Api.Models.Internal.User.Id does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    get:
      tags:
      - User
      summary: Get information about the current Tgstation.Server.Api.Models.User.
      operationId: UserController.Read
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      responses:
        200:
          description: The Tgstation.Server.Api.Models.User was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /User/List:
    get:
      tags:
      - User
      summary: List all Tgstation.Server.Api.Models.Users in the server.
      operationId: UserController.List
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: page
        in: query
        description: The current page.
        schema:
          type: integer
          description: The current page.
          format: int32
          nullable: true
      - name: pageSize
        in: query
        description: The page size.
        schema:
          type: integer
          description: The page size.
          format: int32
          nullable: true
      responses:
        200:
          description: Retrieved Tgstation.Server.Api.Models.Users successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUser'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /User/{id}:
    get:
      tags:
      - User
      summary: Get a specific Tgstation.Server.Api.Models.User.
      operationId: UserController.GetId
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: id
        in: path
        description: The Tgstation.Server.Api.Models.Internal.User.Id to retrieve.
        required: true
        schema:
          type: integer
          description: The Tgstation.Server.Api.Models.Internal.User.Id to retrieve.
          format: int64
      responses:
        200:
          description: The Tgstation.Server.Api.Models.User was retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: The Tgstation.Server.Api.Models.User does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /UserGroup:
    put:
      tags:
      - UserGroup
      summary: Create a new Tgstation.Server.Api.Models.UserGroup.
      operationId: UserGroupController.Create
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      requestBody:
        description: The Tgstation.Server.Api.Models.UserGroup to create.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserGroup'
              description: The Tgstation.Server.Api.Models.UserGroup to create.
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserGroup'
              description: The Tgstation.Server.Api.Models.UserGroup to create.
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserGroup'
              description: The Tgstation.Server.Api.Models.UserGroup to create.
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserGroup'
              description: The Tgstation.Server.Api.Models.UserGroup to create.
      responses:
        201:
          description: Tgstation.Server.Api.Models.UserGroup created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    post:
      tags:
      - UserGroup
      summary: Update a new Tgstation.Server.Api.Models.UserGroup.
      operationId: UserGroupController.Update
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      requestBody:
        description: The Tgstation.Server.Api.Models.UserGroup to update.
        content:
          application/json-patch+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserGroup'
              description: The Tgstation.Server.Api.Models.UserGroup to update.
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserGroup'
              description: The Tgstation.Server.Api.Models.UserGroup to update.
          text/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserGroup'
              description: The Tgstation.Server.Api.Models.UserGroup to update.
          application/*+json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UserGroup'
              description: The Tgstation.Server.Api.Models.UserGroup to update.
      responses:
        200:
          description: Tgstation.Server.Api.Models.UserGroup updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
        410:
          description: The requested Tgstation.Server.Api.Models.UserGroup does not currently exist.
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /UserGroup/{id}:
    get:
      tags:
      - UserGroup
      summary: Gets a specific Tgstation.Server.Api.Models.UserGroup.
      operationId: UserGroupController.GetId
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: id
        in: path
        description: The Tgstation.Server.Api.Models.EntityId.Id of the Tgstation.Server.Api.Models.UserGroup.
        required: true
        schema:
          type: integer
          description: The Tgstation.Server.Api.Models.EntityId.Id of the Tgstation.Server.Api.Models.UserGroup.
          format: int64
      responses:
        200:
          description: Retrieve Tgstation.Server.Api.Models.UserGroup successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'
        410:
          description: The requested Tgstation.Server.Api.Models.UserGroup does not currently exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
    delete:
      tags:
      - UserGroup
      summary: Delete an Tgstation.Server.Api.Models.UserGroup.
      operationId: UserGroupController.Delete
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: id
        in: path
        description: The Tgstation.Server.Api.Models.EntityId.Id of the Tgstation.Server.Api.Models.UserGroup to delete.
        required: true
        schema:
          type: integer
          description: The Tgstation.Server.Api.Models.EntityId.Id of the Tgstation.Server.Api.Models.UserGroup to delete.
          format: int64
      responses:
        204:
          description: Tgstation.Server.Api.Models.UserGroup was deleted.
        409:
          description: The Tgstation.Server.Api.Models.UserGroup is not empty.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        410:
          description: The Tgstation.Server.Api.Models.UserGroup didn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
  /UserGroup/List:
    get:
      tags:
      - UserGroup
      summary: Lists Tgstation.Server.Api.Models.UserGroups for the instance.
      operationId: UserGroupController.List
      parameters:
      - $ref: '#/components/parameters/Api'
      - $ref: '#/components/parameters/User-Agent'
      - name: page
        in: query
        description: The current page.
        schema:
          type: integer
          description: The current page.
          format: int32
          nullable: true
      - name: pageSize
        in: query
        description: The page size.
        schema:
          type: integer
          description: The page size.
          format: int32
          nullable: true
      responses:
        200:
          description: Retrieved Tgstation.Server.Api.Models.UserGroups successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserGroup'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        406:
          $ref: '#/components/responses/406'
        500:
          $ref: '#/components/responses/500'
        503:
          $ref: '#/components/responses/503'
        501:
          $ref: '#/components/responses/501'
      security:
      - Token_Authorization_Scheme: []
components:
  schemas:
    Administration:
      type: object
      properties:
        trackedRepositoryUrl:
          type: string
          description: The GitHub repository the server is built to recieve updates from
          format: uri
          nullable: true
        latestVersion:
          type: string
          description: The latest available version of the Tgstation.Server.Host assembly from the upstream repository. If System.Version.Major is higher than Tgstation.Server.Api.Models.Administration.NewVersion's the update cannot be applied due to API changes
          nullable: true
        newVersion:
          type: string
          description: Changes the version of Tgstation.Server.Host to the given version from the upstream repository
          nullable: true
      additionalProperties: false
      description: Represents administrative server information
    ErrorCode:
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10
      - 11
      - 12
      - 13
      - 14
      - 15
      - 16
      - 17
      - 18
      - 19
      - 20
      - 21
      - 22
      - 23
      - 24
      - 25
      - 26
      - 27
      - 28
      - 29
      - 30
      - 31
      - 32
      - 33
      - 34
      - 35
      - 36
      - 37
      - 38
      - 39
      - 40
      - 41
      - 42
      - 43
      - 44
      - 45
      - 46
      - 47
      - 48
      - 49
      - 50
      - 51
      - 52
      - 53
      - 54
      - 55
      - 56
      - 57
      - 58
      - 59
      - 60
      - 61
      - 62
      - 63
      - 64
      - 65
      - 66
      - 67
      - 68
      - 69
      - 70
      - 71
      - 72
      - 73
      - 74
      - 75
      - 76
      - 77
      - 78
      - 79
      - 80
      - 81
      - 82
      - 83
      - 84
      - 85
      - 86
      - 87
      - 88
      - 89
      - 90
      - 91
      - 92
      - 93
      - 94
      - 95
      - 96
      - 97
      - 98
      - 99
      type: integer
      description: Types of Tgstation.Server.Api.Models.ErrorMessages that the API may return.
      format: int32
      x-enum-varnames:
      - InternalServerError
      - ApiMismatch
      - ModelValidationFailure
      - IOError
      - BadHeaders
      - TokenWithToken
      - DatabaseIntegrityConflict
      - MissingHostWatchdog
      - CannotChangeServerSuite
      - RemoteApiError
      - ServerUpdateInProgress
      - UserNameChange
      - UserSidChange
      - UserMismatchNameSid
      - UserMismatchPasswordSid
      - UserPasswordLength
      - UserColonInName
      - UserMissingName
      - InstanceRelocateOnline
      - InstanceAtExistingPath
      - InstanceDetachOnline
      - InstanceAtConflictingPath
      - InstanceLimitReached
      - InstanceWhitespaceName
      - InstanceHeaderRequired
      - RequiresPosixSystemIdentity
      - ConfigurationFileUpdated
      - ConfigurationDirectoryNotEmpty
      - RepoMissingOrigin
      - RepoMismatchUserAndAccessToken
      - RepoCloning
      - RepoBusy
      - RepoExists
      - RepoMissing
      - RepoMismatchShaAndReference
      - RepoMismatchShaAndUpdate
      - RepoCantChangeOrigin
      - RepoDuplicateTestMerge
      - RepoWhitespaceCommitterName
      - RepoWhitespaceCommitterEmail
      - ApiPageTooLarge
      - ApiInvalidPageOrPageSize
      - ChatBotWrongChannelType
      - ChatBotWhitespaceConnectionString
      - ChatBotWhitespaceName
      - ChatBotProviderMissing
      - UserGroupControllerCantEditMembers
      - ChatBotMax
      - ChatBotMaxChannels
      - ByondDirectXInstallFail
      - ByondDownloadFail
      - ByondNoVersionsInstalled
      - DreamMakerNeverValidated
      - DreamMakerInvalidValidation
      - CannotRemoveLastAuthenticationOption
      - DreamMakerNoDme
      - DreamMakerMissingDme
      - DreamMakerExitCode
      - DreamMakerCompileJobInProgress
      - InstanceMissingDreamDaemonSettings
      - InstanceMissingDreamMakerSettings
      - InstanceMissingRepositorySettings
      - InstanceUpdateTestMergeConflict
      - RepoCredentialsRequired
      - RepoCannotAuthenticate
      - RepoReferenceRequired
      - WatchdogRunning
      - WatchdogCompileJobCorrupted
      - WatchdogStartupFailed
      - WatchdogStartupTimeout
      - RepoUnsupportedTestMergeRemote
      - RepoSwappedShaOrReference
      - RepoMergeConflict
      - RepoReferenceNotTracking
      - RepoTestMergeConflict
      - InstanceNotAtWhitelistedPath
      - DreamDaemonDoubleSoft
      - DeploymentPagerRunning
      - DreamDaemonPortInUse
      - PostDeployFailure
      - WatchdogNotRunning
      - ResourceNotPresent
      - ResourceNeverPresent
      - GitHubApiRateLimit
      - JobStopped
      - MissingGCore
      - GCoreFailure
      - RepoTestMergeInvalidRemote
      - ByondNonExistentCustomVersion
      - DreamDaemonOffline
      - InstanceOffline
      - ChatCannotConnectProvider
      - ByondDreamDaemonFirewallFail
      - NoPortsAvailable
      - PortNotAvailable
      - AdminUserCannotOAuth
      - OAuthProviderDisabled
      - FileUploadExpired
      - UserGroupAndPermissionSet
      - UserGroupNotEmpty
    ErrorMessage:
      type: object
      properties:
        serverApiVersion:
          type: string
          description: The version of the API the server is using
        message:
          type: string
          description: A human readable description of the error
        additionalData:
          type: string
          description: Additional data associated with the error message.
          nullable: true
        errorCode:
          allOf:
          - $ref: '#/components/schemas/ErrorCode'
          description: The Tgstation.Server.Api.Models.ErrorMessage.ErrorCode of the Tgstation.Server.Api.Models.ErrorMessage.
      additionalProperties: false
      description: Represents an error message returned by the server
    LogFile:
      type: object
      properties:
        name:
          type: string
          description: The name of the log file.
          nullable: true
        lastModified:
          type: string
          description: The System.DateTimeOffset of when the log file was modified.
          format: date-time
        fileTicket:
          type: string
          description: The ticket to use to access the Tgstation.Server.Api.Routes.Transfer controller.
          nullable: true
      additionalProperties: false
      description: Represents a server log file.
    PaginatedLogFile:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/LogFile'
          description: The System.Collections.Generic.ICollection`1 of the returned <typeparamref name="TModel" />s.
        totalPages:
          type: integer
          description: The total number of pages in the query.
          format: int32
        pageSize:
          type: integer
          description: The current size of pages in the query.
          format: int32
      additionalProperties: false
      description: Represents a paginated set of models.
      nullable: true
    ShallowUser:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the Tgstation.Server.Api.Models.Internal.User
          format: int64
          nullable: true
        enabled:
          type: boolean
          description: If the Tgstation.Server.Api.Models.Internal.User is enabled since users cannot be deleted. System users cannot be disabled
          nullable: true
        createdAt:
          type: string
          description: When the Tgstation.Server.Api.Models.Internal.User was created
          format: date-time
          nullable: true
        systemIdentifier:
          maxLength: 100
          minLength: 1
          type: string
          description: The SID/UID of the Tgstation.Server.Api.Models.Internal.User on Windows/POSIX respectively
          nullable: true
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: The name of the Tgstation.Server.Api.Models.Internal.User
      additionalProperties: false
      description: Represents a server Tgstation.Server.Api.Models.Internal.User
    OAuthProvider:
      enum:
      - GitHub
      - Discord
      - TGForums
      - Keycloak
      type: string
      description: List of OAuth providers supported by TGS
      x-enum-varnames:
      - GitHub
      - Discord
      - TGForums
      - Keycloak
    OAuthConnection:
      type: object
      properties:
        provider:
          allOf:
          - $ref: '#/components/schemas/OAuthProvider'
          description: The Tgstation.Server.Api.Models.OAuthProvider of the Tgstation.Server.Api.Models.OAuthConnection.
        externalUserId:
          maxLength: 100
          minLength: 1
          type: string
          description: The ID of the user in the Tgstation.Server.Api.Models.OAuthConnection.Provider.
      additionalProperties: false
      description: Represents a valid OAuth connection.
    AdministrationRights:
      enum:
      - 0
      - 1
      - 2
      - 4
      - 8
      - 16
      - 32
      - 64
      type: integer
      description: Rights for Tgstation.Server.Api.Models.Administration
      format: int64
      x-enum-varnames:
      - None
      - WriteUsers
      - RestartHost
      - ChangeVersion
      - EditOwnPassword
      - ReadUsers
      - DownloadLogs
      - EditOwnOAuthConnections
    InstanceManagerRights:
      enum:
      - 0
      - 1
      - 2
      - 4
      - 8
      - 16
      - 32
      - 64
      - 128
      - 256
      - 512
      - 1024
      type: integer
      description: Rights for managing Tgstation.Server.Api.Models.Instances
      format: int64
      x-enum-varnames:
      - None
      - Read
      - Create
      - Rename
      - Relocate
      - SetOnline
      - Delete
      - List
      - SetConfiguration
      - SetAutoUpdate
      - SetChatBotLimit
      - GrantPermissions
    PermissionSet:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the Tgstation.Server.Api.Models.PermissionSet.
          format: int64
          nullable: true
        administrationRights:
          allOf:
          - $ref: '#/components/schemas/AdministrationRights'
          description: The Tgstation.Server.Api.Rights.AdministrationRights for the Tgstation.Server.Api.Models.User
          nullable: true
        instanceManagerRights:
          allOf:
          - $ref: '#/components/schemas/InstanceManagerRights'
          description: The Tgstation.Server.Api.Rights.InstanceManagerRights for the Tgstation.Server.Api.Models.User
          nullable: true
      additionalProperties: false
      description: Represents a set of server permissions.
    ShallowUserGroup:
      type: object
      properties:
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: The name of the Tgstation.Server.Api.Models.Internal.UserGroup.
        id:
          type: integer
          description: The ID of the entity.
          format: int64
      additionalProperties: false
      description: Represents a group of Tgstation.Server.Api.Models.Users.
    User:
      type: object
      properties:
        createdBy:
          allOf:
          - $ref: '#/components/schemas/ShallowUser'
          description: The Tgstation.Server.Api.Models.User who created this Tgstation.Server.Api.Models.User
        oAuthConnections:
          type: array
          items:
            $ref: '#/components/schemas/OAuthConnection'
          description: List of Tgstation.Server.Api.Models.OAuthConnections associated with the Tgstation.Server.Api.Models.User.
          nullable: true
        permissionSet:
          allOf:
          - $ref: '#/components/schemas/PermissionSet'
          description: The Tgstation.Server.Api.Models.PermissionSet directly associated with the Tgstation.Server.Api.Models.User.
          nullable: true
        group:
          allOf:
          - $ref: '#/components/schemas/ShallowUserGroup'
          description: The Tgstation.Server.Api.Models.UserGroup asociated with the Tgstation.Server.Api.Models.User, if any.
          nullable: true
        id:
          type: integer
          description: The ID of the Tgstation.Server.Api.Models.Internal.User
          format: int64
          nullable: true
        enabled:
          type: boolean
          description: If the Tgstation.Server.Api.Models.Internal.User is enabled since users cannot be deleted. System users cannot be disabled
          nullable: true
        createdAt:
          type: string
          description: When the Tgstation.Server.Api.Models.Internal.User was created
          format: date-time
          nullable: true
        systemIdentifier:
          maxLength: 100
          minLength: 1
          type: string
          description: The SID/UID of the Tgstation.Server.Api.Models.Internal.User on Windows/POSIX respectively
          nullable: true
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: The name of the Tgstation.Server.Api.Models.Internal.User
      additionalProperties: false
    RightsType:
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      type: integer
      description: The type of rights a model uses
      format: int64
      x-enum-varnames:
      - Administration
      - InstanceManager
      - Repository
      - Byond
      - DreamMaker
      - DreamDaemon
      - ChatBots
      - Configuration
      - InstancePermissionSet
    Job:
      type: object
      properties:
        startedBy:
          allOf:
          - $ref: '#/components/schemas/User'
          description: The Tgstation.Server.Api.Models.User that started the job
          nullable: true
        cancelledBy:
          allOf:
          - $ref: '#/components/schemas/User'
          description: The Tgstation.Server.Api.Models.User that cancelled the job
          nullable: true
        progress:
          type: integer
          description: Optional progress between 0 and 100 inclusive
          format: int32
          nullable: true
        description:
          type: string
          description: English description of the Tgstation.Server.Api.Models.Internal.Job
        errorCode:
          allOf:
          - $ref: '#/components/schemas/ErrorCode'
          description: The Tgstation.Server.Api.Models.ErrorCode associated with the Tgstation.Server.Api.Models.Internal.Job if any.
          nullable: true
        exceptionDetails:
          type: string
          description: Details of any exceptions caught during the Tgstation.Server.Api.Models.Internal.Job
          nullable: true
        startedAt:
          type: string
          description: When the Tgstation.Server.Api.Models.Internal.Job was started
          format: date-time
          nullable: true
        stoppedAt:
          type: string
          description: When the Tgstation.Server.Api.Models.Internal.Job stopped
          format: date-time
          nullable: true
        cancelled:
          type: boolean
          description: If the Tgstation.Server.Api.Models.Internal.Job was cancelled
          nullable: true
        cancelRightsType:
          allOf:
          - $ref: '#/components/schemas/RightsType'
          description: The Tgstation.Server.Api.Rights.RightsType of Tgstation.Server.Api.Models.Internal.Job.CancelRight if it can be cancelled
          nullable: true
        cancelRight:
          type: integer
          description: The N:Tgstation.Server.Api.Rights required to cancel the Tgstation.Server.Api.Models.Internal.Job
          format: int64
          nullable: true
        id:
          type: integer
          description: The ID of the entity.
          format: int64
      additionalProperties: false
      description: Represents a long running job on the server. Model is read-only, updates attempt to cancel the job
    Byond:
      type: object
      properties:
        version:
          type: string
          description: The System.Version of the Tgstation.Server.Api.Models.Byond installation used for new compiles. Will be <see langword="null" /> if the user does not have permission to view it or there is no BYOND version installed. Only considers the System.Version.Major and System.Version.Minor numbers.
          nullable: true
        installJob:
          allOf:
          - $ref: '#/components/schemas/Job'
          description: The Tgstation.Server.Api.Models.Job being used to install a new Tgstation.Server.Api.Models.Byond.Version
          nullable: true
        uploadCustomZip:
          type: boolean
          description: If a custom BYOND version is to be uploaded.
          nullable: true
        fileTicket:
          type: string
          description: The ticket to use to access the Tgstation.Server.Api.Routes.Transfer controller.
          nullable: true
      additionalProperties: false
      description: Represents a BYOND installation. Tgstation.Server.Api.Models.FileTicketResult.FileTicket is used to upload custom BYOND version zip files, though Tgstation.Server.Api.Models.Byond.Version must still be set.
    PaginatedByond:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Byond'
          description: The System.Collections.Generic.ICollection`1 of the returned <typeparamref name="TModel" />s.
        totalPages:
          type: integer
          description: The total number of pages in the query.
          format: int32
        pageSize:
          type: integer
          description: The current size of pages in the query.
          format: int32
      additionalProperties: false
      description: Represents a paginated set of models.
      nullable: true
    ChatChannel:
      type: object
      properties:
        ircChannel:
          maxLength: 100
          minLength: 1
          type: string
          description: >-
            The IRC channel name. Also potentially contains the channel passsword (if separated by a colon).

            If multiple copies of the same channel with different keys are added to the server, the one that will be used is undefined.
          nullable: true
        discordChannelId:
          type: integer
          description: The Discord channel ID
          format: int64
          nullable: true
        isAdminChannel:
          type: boolean
          description: If the Tgstation.Server.Api.Models.ChatChannel is an admin channel
          nullable: true
        isWatchdogChannel:
          type: boolean
          description: If the Tgstation.Server.Api.Models.ChatChannel is a watchdog channel
          nullable: true
        isUpdatesChannel:
          type: boolean
          description: If the Tgstation.Server.Api.Models.ChatChannel is an updates channel
          nullable: true
        tag:
          maxLength: 10000
          minLength: 0
          type: string
          description: A custom tag users can define to group channels together
          nullable: true
      additionalProperties: false
      description: Indicates a chat channel
    ChatProvider:
      enum:
      - 0
      - 1
      type: integer
      description: Represents a chat service provider
      format: int32
      x-enum-varnames:
      - Irc
      - Discord
    ChatBot:
      type: object
      properties:
        channels:
          type: array
          items:
            $ref: '#/components/schemas/ChatChannel'
          description: Channels the Discord bot should listen/announce in
          nullable: true
        id:
          type: integer
          description: The settings id
          format: int64
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: The name of the connection
        enabled:
          type: boolean
          description: If the connection is enabled
          nullable: true
        reconnectionInterval:
          maximum: 4294967295
          minimum: 1
          type: integer
          description: The time interval in minutes the chat bot attempts to reconnect if Tgstation.Server.Api.Models.Internal.ChatBot.Enabled and disconnected. Must not be zero.
          format: int32
          nullable: true
        channelLimit:
          type: integer
          description: The maximum number of Tgstation.Server.Api.Models.ChatChannels the Tgstation.Server.Api.Models.Internal.ChatBot may contain.
          format: int32
          nullable: true
        provider:
          allOf:
          - $ref: '#/components/schemas/ChatProvider'
          description: The Tgstation.Server.Api.Models.ChatProvider used for the connection
          nullable: true
        connectionString:
          maxLength: 10000
          minLength: 0
          type: string
          description: The information used to connect to the Tgstation.Server.Api.Models.Internal.ChatBot.Provider
      additionalProperties: false
    PaginatedChatBot:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ChatBot'
          description: The System.Collections.Generic.ICollection`1 of the returned <typeparamref name="TModel" />s.
        totalPages:
          type: integer
          description: The total number of pages in the query.
          format: int32
        pageSize:
          type: integer
          description: The current size of pages in the query.
          format: int32
      additionalProperties: false
      description: Represents a paginated set of models.
      nullable: true
    ConfigurationFile:
      type: object
      properties:
        path:
          maxLength: 10000
          minLength: 0
          type: string
          description: The path to the Tgstation.Server.Api.Models.ConfigurationFile file
          nullable: true
        accessDenied:
          type: boolean
          description: If access to the Tgstation.Server.Api.Models.ConfigurationFile file was denied for the operation
          nullable: true
        isDirectory:
          type: boolean
          description: If Tgstation.Server.Api.Models.ConfigurationFile.Path represents a directory
          nullable: true
        lastReadHash:
          type: string
          description: The MD5 hash of the file when last read by the user. If this doesn't match during update actions, the write will be denied with System.Net.HttpStatusCode.Conflict
          nullable: true
        fileTicket:
          type: string
          description: The ticket to use to access the Tgstation.Server.Api.Routes.Transfer controller.
          nullable: true
      additionalProperties: false
      description: Represents a game configuration file. Create and delete actions uncerimonuously overwrite/delete files
    PaginatedConfigurationFile:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ConfigurationFile'
          description: The System.Collections.Generic.ICollection`1 of the returned <typeparamref name="TModel" />s.
        totalPages:
          type: integer
          description: The total number of pages in the query.
          format: int32
        pageSize:
          type: integer
          description: The current size of pages in the query.
          format: int32
      additionalProperties: false
      description: Represents a paginated set of models.
      nullable: true
    TestMerge:
      type: object
      properties:
        mergedBy:
          allOf:
          - $ref: '#/components/schemas/User'
          description: The Tgstation.Server.Api.Models.User who created the Tgstation.Server.Api.Models.TestMerge
          nullable: true
        id:
          type: integer
          description: The ID of the Tgstation.Server.Api.Models.Internal.TestMerge
          format: int64
        mergedAt:
          type: string
          description: When the Tgstation.Server.Api.Models.Internal.TestMerge was created
          format: date-time
        titleAtMerge:
          type: string
          description: The title of the test merge source.
        bodyAtMerge:
          type: string
          description: The body of the test merge source.
        url:
          type: string
          description: The URL of the test merge source.
        author:
          type: string
          description: The author of the test merge source.
        number:
          type: integer
          description: The number of the test merge source.
          format: int32
        targetCommitSha:
          maxLength: 40
          minLength: 0
          type: string
          description: The sha of the test merge revision to merge. If not specified, the latest commit shall be used (semi-unsafe)
        comment:
          maxLength: 10000
          minLength: 0
          type: string
          description: Optional comment about the test
          nullable: true
      additionalProperties: false
    EntityId:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the entity.
          format: int64
      additionalProperties: false
      description: Common base of Tgstation.Server.Api.Models.Instances, Tgstation.Server.Api.Models.CompileJobs, and Tgstation.Server.Api.Models.Jobs.
    RevisionInformation:
      type: object
      properties:
        primaryTestMerge:
          allOf:
          - $ref: '#/components/schemas/TestMerge'
          description: The Tgstation.Server.Api.Models.TestMerge that was created with this Tgstation.Server.Api.Models.RevisionInformation
          nullable: true
        activeTestMerges:
          type: array
          items:
            $ref: '#/components/schemas/TestMerge'
          description: The Tgstation.Server.Api.Models.TestMerges active in the Tgstation.Server.Api.Models.RevisionInformation
          nullable: true
        compileJobs:
          type: array
          items:
            $ref: '#/components/schemas/EntityId'
          description: The Tgstation.Server.Api.Models.CompileJobs made from the Tgstation.Server.Api.Models.RevisionInformation
          nullable: true
        commitSha:
          maxLength: 40
          minLength: 0
          type: string
          description: The revision sha
        originCommitSha:
          maxLength: 40
          minLength: 0
          type: string
          description: The sha of the most recent remote commit
      additionalProperties: false
    DreamDaemonSecurity:
      enum:
      - 0
      - 1
      - 2
      type: integer
      description: DreamDaemon's security level
      format: int32
      x-enum-varnames:
      - Trusted
      - Safe
      - Ultrasafe
    CompileJob:
      type: object
      properties:
        job:
          allOf:
          - $ref: '#/components/schemas/Job'
          description: The Tgstation.Server.Api.Models.CompileJob.Job relating to this job
          nullable: true
        revisionInformation:
          allOf:
          - $ref: '#/components/schemas/RevisionInformation'
          description: Git revision the compiler ran on. Not modifiable
          nullable: true
        byondVersion:
          type: string
          description: The Tgstation.Server.Api.Models.Byond.Version the Tgstation.Server.Api.Models.CompileJob was made with
          nullable: true
        repositoryOrigin:
          type: string
          description: The origin System.Uri of the repository the compile job was built from.
          format: uri
          nullable: true
        dmeName:
          type: string
          description: The .dme file used for compilation
        output:
          type: string
          description: Textual output of DM
        directoryName:
          type: string
          description: The Game folder the results were compiled into
          format: uuid
          nullable: true
        minimumSecurityLevel:
          allOf:
          - $ref: '#/components/schemas/DreamDaemonSecurity'
          description: The minimum Tgstation.Server.Api.Models.DreamDaemonSecurity required to run the Tgstation.Server.Api.Models.Internal.CompileJob's output
          nullable: true
        dmApiVersion:
          type: string
          description: The DMAPI System.Version.
          nullable: true
        id:
          type: integer
          description: The ID of the entity.
          format: int64
      additionalProperties: false
    WatchdogStatus:
      enum:
      - 0
      - 1
      - 2
      - 3
      type: integer
      description: The current status of the watchdog.
      format: int32
      x-enum-varnames:
      - Offline
      - Restoring
      - Online
      - DelayedRestart
    DreamDaemon:
      type: object
      properties:
        activeCompileJob:
          allOf:
          - $ref: '#/components/schemas/CompileJob'
          description: The live revision
          nullable: true
        stagedCompileJob:
          allOf:
          - $ref: '#/components/schemas/CompileJob'
          description: The next revision to go live
          nullable: true
        status:
          allOf:
          - $ref: '#/components/schemas/WatchdogStatus'
          description: The current Tgstation.Server.Api.Models.WatchdogStatus.
          nullable: true
        currentSecurity:
          allOf:
          - $ref: '#/components/schemas/DreamDaemonSecurity'
          description: The current Tgstation.Server.Api.Models.DreamDaemonSecurity of Tgstation.Server.Api.Models.DreamDaemon. May be downgraded due to requirements of Tgstation.Server.Api.Models.DreamDaemon.ActiveCompileJob
          nullable: true
        currentPort:
          type: integer
          description: The port the running Tgstation.Server.Api.Models.DreamDaemon instance is set to
          format: int32
          nullable: true
        currentAllowWebclient:
          type: boolean
          description: The webclient status the running Tgstation.Server.Api.Models.DreamDaemon instance is set to
          nullable: true
        softRestart:
          type: boolean
          description: If the server is undergoing a soft reset. This may be automatically set by changes to other fields
          nullable: true
        softShutdown:
          type: boolean
          description: If the server is undergoing a soft shutdown
          nullable: true
        createDump:
          type: boolean
          description: If a dump of the active DreamDaemon executable should be created.
          nullable: true
        autoStart:
          type: boolean
          description: If Tgstation.Server.Api.Models.DreamDaemon starts when it's Tgstation.Server.Api.Models.Instance starts
          nullable: true
        allowWebClient:
          type: boolean
          description: If the BYOND web client can be used to connect to the game server
          nullable: true
        securityLevel:
          allOf:
          - $ref: '#/components/schemas/DreamDaemonSecurity'
          description: The Tgstation.Server.Api.Models.DreamDaemonSecurity level of Tgstation.Server.Api.Models.DreamDaemon
          nullable: true
        port:
          maximum: 65535
          minimum: 1
          type: integer
          description: The first port Tgstation.Server.Api.Models.DreamDaemon uses. This should be the publically advertised port
          format: int32
          nullable: true
        startupTimeout:
          maximum: 4294967295
          minimum: 1
          type: integer
          description: The DreamDaemon startup timeout in seconds
          format: int32
          nullable: true
        heartbeatSeconds:
          type: integer
          description: The number of seconds between each watchdog heartbeat. 0 disables.
          format: int32
          nullable: true
        topicRequestTimeout:
          maximum: 4294967295
          minimum: 1
          type: integer
          description: The timeout for sending and receiving BYOND topics in milliseconds.
          format: int32
          nullable: true
        additionalParameters:
          maxLength: 10000
          minLength: 0
          type: string
          description: Parameters string for DreamDaemon.
      additionalProperties: false
      description: Represents an instance of BYOND's DreamDaemon game server. Create action starts the server. Delete action shuts down the server
    DreamMaker:
      type: object
      properties:
        projectName:
          maxLength: 10000
          minLength: 0
          type: string
          description: The .dme file Tgstation.Server.Api.Models.DreamMaker tries to compile with without the extension
          nullable: true
        apiValidationPort:
          maximum: 65535
          minimum: 1
          type: integer
          description: The port used during compilation to validate the DMAPI
          format: int32
          nullable: true
        apiValidationSecurityLevel:
          allOf:
          - $ref: '#/components/schemas/DreamDaemonSecurity'
          description: The Tgstation.Server.Api.Models.DreamDaemonSecurity level used to validate the DMAPI
          nullable: true
        requireDMApiValidation:
          type: boolean
          description: If API validation should be required for a deployment to succeed.
          nullable: true
      additionalProperties: false
      description: Represents the state of the DreamMaker compiler. Create action starts a new compile. Delete action cancels the current compile
    PaginatedCompileJob:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CompileJob'
          description: The System.Collections.Generic.ICollection`1 of the returned <typeparamref name="TModel" />s.
        totalPages:
          type: integer
          description: The total number of pages in the query.
          format: int32
        pageSize:
          type: integer
          description: The current size of pages in the query.
          format: int32
      additionalProperties: false
      description: Represents a paginated set of models.
      nullable: true
    SwarmServer:
      type: object
      properties:
        controller:
          type: boolean
          description: If the Tgstation.Server.Api.Models.SwarmServer is the controller.
        address:
          type: string
          description: The public address of the server.
          format: uri
        identifier:
          type: string
          description: The server's identifier.
      additionalProperties: false
    OAuthProviderInfo:
      type: object
      properties:
        clientId:
          type: string
          description: The client ID.
          nullable: true
        redirectUri:
          type: string
          description: The redirect URL.
          format: uri
          nullable: true
        serverUrl:
          type: string
          description: The server URL.
          format: uri
          nullable: true
      additionalProperties: false
      description: Public information about a given Tgstation.Server.Api.Models.OAuthProvider.
    ServerInformation:
      type: object
      properties:
        version:
          type: string
          description: The version of the host
          nullable: true
        apiVersion:
          type: string
          description: The N:Tgstation.Server.Api version of the host
          nullable: true
        dmApiVersion:
          type: string
          description: The DMAPI version of the host.
          nullable: true
        windowsHost:
          type: boolean
          description: If the server is running on a windows operating system.
        updateInProgress:
          type: boolean
          description: If there is a server update in progress.
        swarmServers:
          type: array
          items:
            $ref: '#/components/schemas/SwarmServer'
          description: A System.Collections.Generic.ICollection`1 of connected Tgstation.Server.Api.Models.SwarmServers.
          nullable: true
        oAuthProviderInfos:
          type: object
          properties:
            GitHub:
              $ref: '#/components/schemas/OAuthProviderInfo'
            Discord:
              $ref: '#/components/schemas/OAuthProviderInfo'
            TGForums:
              $ref: '#/components/schemas/OAuthProviderInfo'
            Keycloak:
              $ref: '#/components/schemas/OAuthProviderInfo'
          description: Map of Tgstation.Server.Api.Models.OAuthProvider to the Tgstation.Server.Api.Models.OAuthProviderInfo for them.
          nullable: true
        minimumPasswordLength:
          type: integer
          description: Minimum length of database user passwords.
          format: int32
        instanceLimit:
          type: integer
          description: The maximum number of Tgstation.Server.Api.Models.Instances allowed.
          format: int32
        userLimit:
          type: integer
          description: The maximum number of Tgstation.Server.Api.Models.Users allowed.
          format: int32
        validInstancePaths:
          type: array
          items:
            type: string
          description: Limits the locations instances may be created or attached from.
          nullable: true
      additionalProperties: false
      description: Represents basic server information.
    Token:
      type: object
      properties:
        bearer:
          type: string
          description: The value of the JWT
          nullable: true
        expiresAt:
          type: string
          description: When the Tgstation.Server.Api.Models.Token expires
          format: date-time
      additionalProperties: false
      description: Represents a JWT returned by the API
    ConfigurationType:
      enum:
      - 0
      - 1
      - 2
      type: integer
      description: The type of configuration allowed on an Tgstation.Server.Api.Models.Instance
      format: int32
      x-enum-varnames:
      - Disallowed
      - HostWrite
      - SystemIdentityWrite
    Instance:
      type: object
      properties:
        name:
          maxLength: 10000
          minLength: 0
          type: string
          description: The name of the Tgstation.Server.Api.Models.Instance
        path:
          type: string
          description: The path to where the Tgstation.Server.Api.Models.Instance is located. Can only be changed while the Tgstation.Server.Api.Models.Instance is offline. Must not exist when the instance is created
        online:
          type: boolean
          description: If the Tgstation.Server.Api.Models.Instance is online
          nullable: true
        configurationType:
          allOf:
          - $ref: '#/components/schemas/ConfigurationType'
          description: If Tgstation.Server.Api.Models.ConfigurationFile can be used on the Tgstation.Server.Api.Models.Instance
          nullable: true
        autoUpdateInterval:
          type: integer
          description: The time interval in minutes the repository is automatically pulled and compiles. 0 disables
          format: int32
          nullable: true
        chatBotLimit:
          type: integer
          description: The maximum number of Tgstation.Server.Api.Models.ChatBots the Tgstation.Server.Api.Models.Instance may contain.
          format: int32
          nullable: true
        moveJob:
          allOf:
          - $ref: '#/components/schemas/Job'
          description: The Tgstation.Server.Api.Models.Job representing a change of Tgstation.Server.Api.Models.Instance.Path
          nullable: true
        id:
          type: integer
          description: The ID of the entity.
          format: int64
      additionalProperties: false
      description: Metadata about a server instance
    PaginatedInstance:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Instance'
          description: The System.Collections.Generic.ICollection`1 of the returned <typeparamref name="TModel" />s.
        totalPages:
          type: integer
          description: The total number of pages in the query.
          format: int32
        pageSize:
          type: integer
          description: The current size of pages in the query.
          format: int32
      additionalProperties: false
      description: Represents a paginated set of models.
      nullable: true
    InstancePermissionSetRights:
      enum:
      - 0
      - 1
      - 2
      - 4
      type: integer
      description: Rights for an Tgstation.Server.Api.Models.Instance
      format: int64
      x-enum-varnames:
      - None
      - Read
      - Write
      - Create
    ByondRights:
      enum:
      - 0
      - 1
      - 2
      - 4
      - 8
      - 16
      type: integer
      description: Rights for Tgstation.Server.Api.Models.Byond
      format: int64
      x-enum-varnames:
      - None
      - ReadActive
      - ListInstalled
      - InstallOfficialOrChangeActiveVersion
      - CancelInstall
      - InstallCustomVersion
    DreamDaemonRights:
      enum:
      - 0
      - 1
      - 2
      - 4
      - 8
      - 16
      - 32
      - 64
      - 128
      - 256
      - 512
      - 1024
      - 2048
      - 4096
      - 8192
      - 16384
      - 32768
      type: integer
      description: Rights for Tgstation.Server.Api.Models.DreamDaemon
      format: int64
      x-enum-varnames:
      - None
      - ReadRevision
      - SetPort
      - SetAutoStart
      - SetSecurity
      - ReadMetadata
      - SetWebClient
      - SoftRestart
      - SoftShutdown
      - Restart
      - Shutdown
      - Start
      - SetStartupTimeout
      - SetHeartbeatInterval
      - CreateDump
      - SetTopicTimeout
      - SetAdditionalParameters
    DreamMakerRights:
      enum:
      - 0
      - 1
      - 2
      - 4
      - 8
      - 16
      - 32
      - 64
      - 128
      type: integer
      description: Rights for Tgstation.Server.Api.Models.DreamMaker
      format: int64
      x-enum-varnames:
      - None
      - Read
      - Compile
      - CancelCompile
      - SetDme
      - SetApiValidationPort
      - CompileJobs
      - SetSecurityLevel
      - SetApiValidationRequirement
    RepositoryRights:
      enum:
      - 0
      - 1
      - 2
      - 4
      - 8
      - 16
      - 32
      - 64
      - 128
      - 256
      - 512
      - 1024
      - 2048
      - 4096
      type: integer
      description: Rights for a Tgstation.Server.Api.Models.Repository
      format: int64
      x-enum-varnames:
      - None
      - CancelPendingChanges
      - SetOrigin
      - SetSha
      - MergePullRequest
      - UpdateBranch
      - ChangeCommitter
      - ChangeTestMergeCommits
      - ChangeCredentials
      - SetReference
      - Read
      - ChangeAutoUpdateSettings
      - Delete
      - CancelClone
    ChatBotRights:
      enum:
      - 0
      - 1
      - 2
      - 4
      - 8
      - 16
      - 32
      - 64
      - 128
      - 256
      - 512
      - 1024
      type: integer
      description: Rights for Tgstation.Server.Api.Models.ChatBot
      format: int64
      x-enum-varnames:
      - None
      - WriteEnabled
      - WriteProvider
      - WriteChannels
      - WriteConnectionString
      - ReadConnectionString
      - Read
      - Create
      - Delete
      - WriteName
      - WriteReconnectionInterval
      - WriteChannelLimit
    ConfigurationRights:
      enum:
      - 0
      - 1
      - 2
      - 4
      - 8
      type: integer
      description: Rights for Tgstation.Server.Api.Models.ConfigurationFile
      format: int64
      x-enum-varnames:
      - None
      - Read
      - Write
      - List
      - Delete
    InstancePermissionSet:
      type: object
      properties:
        permissionSetId:
          type: integer
          description: The Tgstation.Server.Api.Models.EntityId.Id of the Tgstation.Server.Api.Models.PermissionSet the Tgstation.Server.Api.Models.InstancePermissionSet belongs to
          format: int64
        instancePermissionSetRights:
          allOf:
          - $ref: '#/components/schemas/InstancePermissionSetRights'
          description: The Tgstation.Server.Api.Rights.InstancePermissionSetRights of the Tgstation.Server.Api.Models.InstancePermissionSet
          nullable: true
        byondRights:
          allOf:
          - $ref: '#/components/schemas/ByondRights'
          description: The Tgstation.Server.Api.Rights.ByondRights of the Tgstation.Server.Api.Models.InstancePermissionSet
          nullable: true
        dreamDaemonRights:
          allOf:
          - $ref: '#/components/schemas/DreamDaemonRights'
          description: The Tgstation.Server.Api.Rights.DreamDaemonRights of the Tgstation.Server.Api.Models.InstancePermissionSet
          nullable: true
        dreamMakerRights:
          allOf:
          - $ref: '#/components/schemas/DreamMakerRights'
          description: The Tgstation.Server.Api.Rights.DreamMakerRights of the Tgstation.Server.Api.Models.InstancePermissionSet
          nullable: true
        repositoryRights:
          allOf:
          - $ref: '#/components/schemas/RepositoryRights'
          description: The Tgstation.Server.Api.Rights.RepositoryRights of the Tgstation.Server.Api.Models.InstancePermissionSet
          nullable: true
        chatBotRights:
          allOf:
          - $ref: '#/components/schemas/ChatBotRights'
          description: The Tgstation.Server.Api.Rights.ChatBotRights of the Tgstation.Server.Api.Models.InstancePermissionSet
          nullable: true
        configurationRights:
          allOf:
          - $ref: '#/components/schemas/ConfigurationRights'
          description: The Tgstation.Server.Api.Rights.ConfigurationRights of the Tgstation.Server.Api.Models.InstancePermissionSet
          nullable: true
      additionalProperties: false
      description: Represents a Tgstation.Server.Api.Models.PermissionSets permissions in an Tgstation.Server.Api.Models.Instance
    PaginatedInstancePermissionSet:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/InstancePermissionSet'
          description: The System.Collections.Generic.ICollection`1 of the returned <typeparamref name="TModel" />s.
        totalPages:
          type: integer
          description: The total number of pages in the query.
          format: int32
        pageSize:
          type: integer
          description: The current size of pages in the query.
          format: int32
      additionalProperties: false
      description: Represents a paginated set of models.
      nullable: true
    PaginatedJob:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Job'
          description: The System.Collections.Generic.ICollection`1 of the returned <typeparamref name="TModel" />s.
        totalPages:
          type: integer
          description: The total number of pages in the query.
          format: int32
        pageSize:
          type: integer
          description: The current size of pages in the query.
          format: int32
      additionalProperties: false
      description: Represents a paginated set of models.
      nullable: true
    RemoteGitProvider:
      enum:
      - 0
      - 1
      - 2
      type: integer
      description: Indicates the remote git host.
      format: int32
      x-enum-varnames:
      - Unknown
      - GitHub
      - GitLab
    TestMergeParameters:
      type: object
      properties:
        number:
          type: integer
          description: The number of the test merge source.
          format: int32
        targetCommitSha:
          maxLength: 40
          minLength: 0
          type: string
          description: The sha of the test merge revision to merge. If not specified, the latest commit shall be used (semi-unsafe)
        comment:
          maxLength: 10000
          minLength: 0
          type: string
          description: Optional comment about the test
          nullable: true
      additionalProperties: false
      description: Parameters for creating a Tgstation.Server.Api.Models.TestMerge
    Repository:
      type: object
      properties:
        origin:
          type: string
          description: The origin URL. If <see langword="null" />, the Tgstation.Server.Api.Models.Repository does not exist
          format: uri
          nullable: true
        recurseSubmodules:
          type: boolean
          description: If submodules should be recursively cloned.
          nullable: true
        checkoutSha:
          maxLength: 40
          minLength: 0
          type: string
          description: The commit HEAD should point to. Not populated in responses, use Tgstation.Server.Api.Models.Repository.RevisionInformation instead for retrieval
          nullable: true
        revisionInformation:
          allOf:
          - $ref: '#/components/schemas/RevisionInformation'
          description: The current Tgstation.Server.Api.Models.RevisionInformation for the Tgstation.Server.Api.Models.Repository
          nullable: true
        remoteGitProvider:
          allOf:
          - $ref: '#/components/schemas/RemoteGitProvider'
          nullable: true
        remoteRepositoryOwner:
          type: string
          nullable: true
        remoteRepositoryName:
          type: string
          nullable: true
        activeJob:
          allOf:
          - $ref: '#/components/schemas/Job'
          description: The Tgstation.Server.Api.Models.Job started by the Tgstation.Server.Api.Models.Repository if any
          nullable: true
        updateFromOrigin:
          type: boolean
          description: Do the equivalent of a git pull. Will attempt to merge unless Tgstation.Server.Api.Models.Repository.Reference is also specified in which case a hard reset will be performed after checking out
          nullable: true
        reference:
          maxLength: 10000
          minLength: 0
          type: string
          description: The branch or tag HEAD points to
          nullable: true
        newTestMerges:
          type: array
          items:
            $ref: '#/components/schemas/TestMergeParameters'
          description: Tgstation.Server.Api.Models.TestMergeParameters for new Tgstation.Server.Api.Models.TestMerges. Note that merges that conflict will not be performed
          nullable: true
        committerName:
          maxLength: 10000
          minLength: 0
          type: string
          description: The name of the committer
        committerEmail:
          maxLength: 10000
          minLength: 0
          type: string
          description: The e-mail of the committer
          format: email
        accessUser:
          maxLength: 10000
          minLength: 0
          type: string
          description: The username to access the git repository with
          nullable: true
        accessToken:
          maxLength: 10000
          minLength: 0
          type: string
          description: The token/password to access the git repository with
          nullable: true
        pushTestMergeCommits:
          type: boolean
          description: If commits created from testmerges are pushed to the remote. Requires Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessUser and Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessToken to be set to function.
          nullable: true
        createGitHubDeployments:
          type: boolean
          description: If GitHub deployments should be created. Requires Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessUser, Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessToken, and Tgstation.Server.Api.Models.Internal.RepositorySettings.PushTestMergeCommits to be set to function.
          nullable: true
        showTestMergeCommitters:
          type: boolean
          description: If test merge commits are signed with the username of the person who merged it. Note this only affects future commits
          nullable: true
        autoUpdatesKeepTestMerges:
          type: boolean
          description: If test merge commits should be kept when auto updating. May cause merge conflicts which will block the update
          nullable: true
        autoUpdatesSynchronize:
          type: boolean
          description: If synchronization should occur when auto updating. Requries Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessUser and Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessToken to be set to function.
          nullable: true
        postTestMergeComment:
          type: boolean
          description: If test merging should create a comment. Requires Tgstation.Server.Api.Models.Internal.RepositorySettings.AccessToken to be set to function.
          nullable: true
      additionalProperties: false
      description: Represents a git repository
    SwarmRegistrationRequest:
      type: object
      properties:
        serverVersion:
          type: string
          description: The TGS System.Version of the sending server.
        address:
          type: string
          description: The public address of the server.
          format: uri
        identifier:
          type: string
          description: The server's identifier.
      additionalProperties: false
      description: A request to register with a swarm controller.
    SwarmServersUpdateRequest:
      type: object
      properties:
        swarmServers:
          type: array
          items:
            $ref: '#/components/schemas/SwarmServer'
          description: The System.Collections.Generic.ICollection`1 of updated Tgstation.Server.Api.Models.SwarmServers.
      additionalProperties: false
      description: A request to update a nodes list of Tgstation.Server.Host.Swarm.SwarmServersUpdateRequest.SwarmServers.
    SwarmUpdateRequest:
      type: object
      properties:
        updateVersion:
          type: string
          description: The TGS System.Version to update to.
      additionalProperties: false
      description: A request to update the swarm's TGS version.
    UserUpdate:
      type: object
      properties:
        password:
          type: string
          description: Cleartext password of the Tgstation.Server.Api.Models.User
        createdBy:
          allOf:
          - $ref: '#/components/schemas/ShallowUser'
          description: The Tgstation.Server.Api.Models.User who created this Tgstation.Server.Api.Models.User
        oAuthConnections:
          type: array
          items:
            $ref: '#/components/schemas/OAuthConnection'
          description: List of Tgstation.Server.Api.Models.OAuthConnections associated with the Tgstation.Server.Api.Models.User.
          nullable: true
        permissionSet:
          allOf:
          - $ref: '#/components/schemas/PermissionSet'
          description: The Tgstation.Server.Api.Models.PermissionSet directly associated with the Tgstation.Server.Api.Models.User.
          nullable: true
        group:
          allOf:
          - $ref: '#/components/schemas/ShallowUserGroup'
          description: The Tgstation.Server.Api.Models.UserGroup asociated with the Tgstation.Server.Api.Models.User, if any.
          nullable: true
        id:
          type: integer
          description: The ID of the Tgstation.Server.Api.Models.Internal.User
          format: int64
          nullable: true
        enabled:
          type: boolean
          description: If the Tgstation.Server.Api.Models.Internal.User is enabled since users cannot be deleted. System users cannot be disabled
          nullable: true
        createdAt:
          type: string
          description: When the Tgstation.Server.Api.Models.Internal.User was created
          format: date-time
          nullable: true
        systemIdentifier:
          maxLength: 100
          minLength: 1
          type: string
          description: The SID/UID of the Tgstation.Server.Api.Models.Internal.User on Windows/POSIX respectively
          nullable: true
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: The name of the Tgstation.Server.Api.Models.Internal.User
      additionalProperties: false
      description: For editing a given Tgstation.Server.Api.Models.User. Will never be returned by the API
    PaginatedUser:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/User'
          description: The System.Collections.Generic.ICollection`1 of the returned <typeparamref name="TModel" />s.
        totalPages:
          type: integer
          description: The total number of pages in the query.
          format: int32
        pageSize:
          type: integer
          description: The current size of pages in the query.
          format: int32
      additionalProperties: false
      description: Represents a paginated set of models.
      nullable: true
    UserGroup:
      type: object
      properties:
        permissionSet:
          allOf:
          - $ref: '#/components/schemas/PermissionSet'
          description: The Tgstation.Server.Api.Models.PermissionSet of the Tgstation.Server.Api.Models.UserGroup.
          nullable: true
        users:
          type: array
          items:
            $ref: '#/components/schemas/ShallowUser'
          description: The Tgstation.Server.Api.Models.Users the Tgstation.Server.Api.Models.UserGroup has.
          nullable: true
        name:
          maxLength: 100
          minLength: 1
          type: string
          description: The name of the Tgstation.Server.Api.Models.Internal.UserGroup.
        id:
          type: integer
          description: The ID of the entity.
          format: int64
      additionalProperties: false
    PaginatedUserGroup:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserGroup'
          description: The System.Collections.Generic.ICollection`1 of the returned <typeparamref name="TModel" />s.
        totalPages:
          type: integer
          description: The total number of pages in the query.
          format: int32
        pageSize:
          type: integer
          description: The current size of pages in the query.
          format: int32
      additionalProperties: false
      description: Represents a paginated set of models.
      nullable: true
  responses:
    400:
      description: A badly formatted request was made. See error message for details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    401:
      description: Invalid Authentication header.
    403:
      description: User lacks sufficient permissions for the operation.
    409:
      description: A data integrity check failed while performing the operation. See error message for details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    406:
      description: 'Invalid Accept header, TGS requires `Accept: application/json`.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    500:
      description: An internal server error occurred!
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
    503:
      description: The server may be starting up or shutting down.
    501:
      description: This operation requires POSIX system identities to be implemented. See https://github.com/tgstation/tgstation-server/issues/709 for details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
  parameters:
    Instance:
      name: Instance
      in: header
      description: The instance ID being accessed
      required: true
      style: simple
      schema:
        type: integer
    Api:
      name: Api
      in: header
      description: The API version being used in the form "Tgstation.Server.Api/[API version]"
      required: true
      style: simple
      schema:
        type: string
        format: productheader
      example: Tgstation.Server.Api/8.0.0
    User-Agent:
      name: User-Agent
      in: header
      description: The user agent of the calling client.
      required: true
      style: simple
      schema:
        type: string
        format: productheader
      example: Your-user-agent/1.0.0.0
  securitySchemes:
    Password_Login_Scheme:
      type: http
      scheme: Basic
    OAuth_Login_Scheme:
      type: http
      scheme: OAuth
    Token_Authorization_Scheme:
      type: http
      scheme: Bearer
      bearerFormat: JWT
